// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package puf_reg_pkg;

  // Param list
  parameter int NumRegs_challenge = 4;
  parameter int NumRegs_response = 8;

  // Address widths within the block
  parameter int BlockAw = 6;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////

  typedef struct packed {
    struct packed {
      logic        q;
      logic        qe;
    } enable_puf;
    struct packed {
      logic        q;
      logic        qe;
    } mode_puf;
    struct packed {
      logic        q;
      logic        qe;
    } ready_cha;
  } puf_reg2hw_ctrl_signals_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } response_valid_bit;
    struct packed {
      logic        q;
    } response_done_2bit;
  } puf_reg2hw_state_signals_reg_t;

  typedef struct packed {
    logic [31:0] q;
    logic        qe;
  } puf_reg2hw_challenge_mreg_t;

  typedef struct packed {
    logic [31:0] q;
  } puf_reg2hw_response_mreg_t;

  typedef struct packed {
    struct packed {
      logic        d;
      logic        de;
    } enable_puf;
    struct packed {
      logic        d;
      logic        de;
    } mode_puf;
    struct packed {
      logic        d;
      logic        de;
    } ready_cha;
  } puf_hw2reg_ctrl_signals_reg_t;

  typedef struct packed {
    struct packed {
      logic        d;
      logic        de;
    } response_valid_bit;
    struct packed {
      logic        d;
      logic        de;
    } response_done_2bit;
  } puf_hw2reg_state_signals_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } puf_hw2reg_challenge_mreg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } puf_hw2reg_response_mreg_t;

  // Register -> HW type
  typedef struct packed {
    puf_reg2hw_ctrl_signals_reg_t ctrl_signals; // [395:390]
    puf_reg2hw_state_signals_reg_t state_signals; // [389:388]
    puf_reg2hw_challenge_mreg_t [3:0] challenge; // [387:256]
    puf_reg2hw_response_mreg_t [7:0] response; // [255:0]
  } puf_reg2hw_t;

  // HW -> register type
  typedef struct packed {
    puf_hw2reg_ctrl_signals_reg_t ctrl_signals; // [405:400]
    puf_hw2reg_state_signals_reg_t state_signals; // [399:396]
    puf_hw2reg_challenge_mreg_t [3:0] challenge; // [395:264]
    puf_hw2reg_response_mreg_t [7:0] response; // [263:0]
  } puf_hw2reg_t;

  // Register offsets
  parameter logic [BlockAw-1:0] PUF_CTRL_SIGNALS_OFFSET = 6'h 0;
  parameter logic [BlockAw-1:0] PUF_STATE_SIGNALS_OFFSET = 6'h 4;
  parameter logic [BlockAw-1:0] PUF_CHALLENGE_0_OFFSET = 6'h 8;
  parameter logic [BlockAw-1:0] PUF_CHALLENGE_1_OFFSET = 6'h c;
  parameter logic [BlockAw-1:0] PUF_CHALLENGE_2_OFFSET = 6'h 10;
  parameter logic [BlockAw-1:0] PUF_CHALLENGE_3_OFFSET = 6'h 14;
  parameter logic [BlockAw-1:0] PUF_RESPONSE_0_OFFSET = 6'h 18;
  parameter logic [BlockAw-1:0] PUF_RESPONSE_1_OFFSET = 6'h 1c;
  parameter logic [BlockAw-1:0] PUF_RESPONSE_2_OFFSET = 6'h 20;
  parameter logic [BlockAw-1:0] PUF_RESPONSE_3_OFFSET = 6'h 24;
  parameter logic [BlockAw-1:0] PUF_RESPONSE_4_OFFSET = 6'h 28;
  parameter logic [BlockAw-1:0] PUF_RESPONSE_5_OFFSET = 6'h 2c;
  parameter logic [BlockAw-1:0] PUF_RESPONSE_6_OFFSET = 6'h 30;
  parameter logic [BlockAw-1:0] PUF_RESPONSE_7_OFFSET = 6'h 34;

  // Register index
  typedef enum int {
    PUF_CTRL_SIGNALS,
    PUF_STATE_SIGNALS,
    PUF_CHALLENGE_0,
    PUF_CHALLENGE_1,
    PUF_CHALLENGE_2,
    PUF_CHALLENGE_3,
    PUF_RESPONSE_0,
    PUF_RESPONSE_1,
    PUF_RESPONSE_2,
    PUF_RESPONSE_3,
    PUF_RESPONSE_4,
    PUF_RESPONSE_5,
    PUF_RESPONSE_6,
    PUF_RESPONSE_7
  } puf_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] PUF_PERMIT [14] = '{
    4'b 0001, // index[ 0] PUF_CTRL_SIGNALS
    4'b 0001, // index[ 1] PUF_STATE_SIGNALS
    4'b 1111, // index[ 2] PUF_CHALLENGE_0
    4'b 1111, // index[ 3] PUF_CHALLENGE_1
    4'b 1111, // index[ 4] PUF_CHALLENGE_2
    4'b 1111, // index[ 5] PUF_CHALLENGE_3
    4'b 1111, // index[ 6] PUF_RESPONSE_0
    4'b 1111, // index[ 7] PUF_RESPONSE_1
    4'b 1111, // index[ 8] PUF_RESPONSE_2
    4'b 1111, // index[ 9] PUF_RESPONSE_3
    4'b 1111, // index[10] PUF_RESPONSE_4
    4'b 1111, // index[11] PUF_RESPONSE_5
    4'b 1111, // index[12] PUF_RESPONSE_6
    4'b 1111  // index[13] PUF_RESPONSE_7
  };

endpackage

