// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// xbar_main module generated by `tlgen.py` tool
// all reset signals should be generated from one reset signal to not make any deadlock
//
// Interconnect

//   -> s1n_57
//     -> sm1_28
//       -> rom_ctrl.rom
//     -> sm1_33
//       -> rom_ctrl.regs
//     -> sm1_50
//       -> hmac
//     -> sm1_53
//       -> keymgr
//     -> sm1_54
//       -> kmac
//     -> sm1_46
//       -> entropy_src
//     -> sm1_47
//       -> csrng
//     -> sm1_48
//       -> edn0
//     -> sm1_52
//       -> otbn
//     -> sm1_60
//       -> sm3
//     -> sm1_61
//       -> sm4
//     -> sm1_65
//       -> rs_encode
//     -> sm1_66
//       -> rs_decode
//     -> sm1_67
//       -> puf

module xbar_main_rot (
  input clk_i,
  input rst_ni,
  

  // Host interfaces
  input  tlul_pkg::tl_h2d_t tl_host_i,
  output tlul_pkg::tl_d2h_t tl_host_o,
  

  // Device interfaces
  output tlul_pkg::tl_h2d_t tl_rom_ctrl__rom_o,
  input  tlul_pkg::tl_d2h_t tl_rom_ctrl__rom_i,
  output tlul_pkg::tl_h2d_t tl_rom_ctrl__regs_o,
  input  tlul_pkg::tl_d2h_t tl_rom_ctrl__regs_i,
  output tlul_pkg::tl_h2d_t tl_hmac_o,
  input  tlul_pkg::tl_d2h_t tl_hmac_i,
  output tlul_pkg::tl_h2d_t tl_kmac_o,
  input  tlul_pkg::tl_d2h_t tl_kmac_i,
  output tlul_pkg::tl_h2d_t tl_keymgr_o,
  input  tlul_pkg::tl_d2h_t tl_keymgr_i,
  output tlul_pkg::tl_h2d_t tl_entropy_src_o,
  input  tlul_pkg::tl_d2h_t tl_entropy_src_i,
  output tlul_pkg::tl_h2d_t tl_csrng_o,
  input  tlul_pkg::tl_d2h_t tl_csrng_i,
  output tlul_pkg::tl_h2d_t tl_edn0_o,
  input  tlul_pkg::tl_d2h_t tl_edn0_i,
  output tlul_pkg::tl_h2d_t tl_otbn_o,
  input  tlul_pkg::tl_d2h_t tl_otbn_i,
  output tlul_pkg::tl_h2d_t tl_sm3_o,
  input  tlul_pkg::tl_d2h_t tl_sm3_i,
  output tlul_pkg::tl_h2d_t tl_sm4_o,
  input  tlul_pkg::tl_d2h_t tl_sm4_i,
  output tlul_pkg::tl_h2d_t tl_rs_encode_o,
  input  tlul_pkg::tl_d2h_t tl_rs_encode_i,
  output tlul_pkg::tl_h2d_t tl_rs_decode_o,
  input  tlul_pkg::tl_d2h_t tl_rs_decode_i,
  output tlul_pkg::tl_h2d_t tl_puf_o,
  input  tlul_pkg::tl_d2h_t tl_puf_i
);

  import tlul_pkg::*;
  import tl_main_rot_pkg::*;

  // scanmode_i is currently not used, but provisioned for future use
  // this assignment prevents lint warnings
//   logic unused_scanmode;
//   assign unused_scanmode = ^scanmode_i;


  // Create steering signal


  tl_h2d_t tl_sm1_28_us_h2d [3];
  tl_d2h_t tl_sm1_28_us_d2h [3];

  tl_h2d_t tl_sm1_28_ds_h2d ;
  tl_d2h_t tl_sm1_28_ds_d2h ;


  tl_h2d_t tl_s1n_32_us_h2d ;
  tl_h2d_t tl_s1n_32_us_h2d_mask ;
  tl_d2h_t tl_s1n_32_us_d2h ;


  tl_h2d_t tl_s1n_32_ds_h2d [14];
  tl_d2h_t tl_s1n_32_ds_d2h [14];

  // Create steering signal
  logic [3:0] dev_sel_s1n_32;


  tl_h2d_t tl_sm1_33_us_h2d [2];
  tl_d2h_t tl_sm1_33_us_d2h [2];

  tl_h2d_t tl_sm1_33_ds_h2d ;
  tl_d2h_t tl_sm1_33_ds_d2h ;


  tl_h2d_t tl_sm1_50_us_h2d [2];
  tl_d2h_t tl_sm1_50_us_d2h [2];

  tl_h2d_t tl_sm1_50_ds_h2d ;
  tl_d2h_t tl_sm1_50_ds_d2h ;


  tl_h2d_t tl_sm1_53_us_h2d [2];
  tl_d2h_t tl_sm1_53_us_d2h [2];

  tl_h2d_t tl_sm1_53_ds_h2d ;
  tl_d2h_t tl_sm1_53_ds_d2h ;


  tl_h2d_t tl_sm1_54_us_h2d [2];
  tl_d2h_t tl_sm1_54_us_d2h [2];

  tl_h2d_t tl_sm1_54_ds_h2d ;
  tl_d2h_t tl_sm1_54_ds_d2h ;

  tl_h2d_t tl_sm1_46_us_h2d [2];
  tl_d2h_t tl_sm1_46_us_d2h [2];

  tl_h2d_t tl_sm1_46_ds_h2d ;
  tl_d2h_t tl_sm1_46_ds_d2h ;


  tl_h2d_t tl_sm1_47_us_h2d [2];
  tl_d2h_t tl_sm1_47_us_d2h [2];

  tl_h2d_t tl_sm1_47_ds_h2d ;
  tl_d2h_t tl_sm1_47_ds_d2h ;


  tl_h2d_t tl_sm1_48_us_h2d [2];
  tl_d2h_t tl_sm1_48_us_d2h [2];

  tl_h2d_t tl_sm1_48_ds_h2d ;
  tl_d2h_t tl_sm1_48_ds_d2h ;

  tl_h2d_t tl_sm1_52_us_h2d [2];
  tl_d2h_t tl_sm1_52_us_d2h [2];

  tl_h2d_t tl_sm1_52_ds_h2d ;
  tl_d2h_t tl_sm1_52_ds_d2h ;

  tl_h2d_t tl_sm1_60_us_h2d [2];
  tl_d2h_t tl_sm1_60_us_d2h [2];

  tl_h2d_t tl_sm1_60_ds_h2d ;
  tl_d2h_t tl_sm1_60_ds_d2h ;


  tl_h2d_t tl_sm1_61_us_h2d [2];
  tl_d2h_t tl_sm1_61_us_d2h [2];

  tl_h2d_t tl_sm1_61_ds_h2d ;
  tl_d2h_t tl_sm1_61_ds_d2h ;

  tl_h2d_t tl_sm1_65_us_h2d [2];
  tl_d2h_t tl_sm1_65_us_d2h [2];

  tl_h2d_t tl_sm1_65_ds_h2d ;
  tl_d2h_t tl_sm1_65_ds_d2h ;


  tl_h2d_t tl_sm1_66_us_h2d [2];
  tl_d2h_t tl_sm1_66_us_d2h [2];

  tl_h2d_t tl_sm1_66_ds_h2d ;
  tl_d2h_t tl_sm1_66_ds_d2h ;


  tl_h2d_t tl_sm1_67_us_h2d [2];
  tl_d2h_t tl_sm1_67_us_d2h [2];

  tl_h2d_t tl_sm1_67_ds_h2d ;
  tl_d2h_t tl_sm1_67_ds_d2h ;



  // Create steering signal
  
  assign tl_sm1_28_us_h2d[1] = tl_s1n_32_ds_h2d[0];
  assign tl_s1n_32_ds_d2h[0] = tl_sm1_28_us_d2h[1];

  assign tl_sm1_33_us_h2d[0] = tl_s1n_32_ds_h2d[1];
  assign tl_s1n_32_ds_d2h[1] = tl_sm1_33_us_d2h[0];

  assign tl_sm1_50_us_h2d[0] = tl_s1n_32_ds_h2d[2];
  assign tl_s1n_32_ds_d2h[2] = tl_sm1_50_us_d2h[0];

  assign tl_sm1_53_us_h2d[0] = tl_s1n_32_ds_h2d[3];
  assign tl_s1n_32_ds_d2h[3] = tl_sm1_53_us_d2h[0];

  assign tl_sm1_54_us_h2d[0] = tl_s1n_32_ds_h2d[4];
  assign tl_s1n_32_ds_d2h[4] = tl_sm1_54_us_d2h[0];

  assign tl_sm1_46_us_h2d[0] = tl_s1n_32_ds_h2d[5];
  assign tl_s1n_32_ds_d2h[5] = tl_sm1_46_us_d2h[0];

  assign tl_sm1_47_us_h2d[0] = tl_s1n_32_ds_h2d[6];
  assign tl_s1n_32_ds_d2h[6] = tl_sm1_47_us_d2h[0];

  assign tl_sm1_48_us_h2d[0] = tl_s1n_32_ds_h2d[7];
  assign tl_s1n_32_ds_d2h[7] = tl_sm1_48_us_d2h[0];

  assign tl_sm1_52_us_h2d[0] = tl_s1n_32_ds_h2d[8];
  assign tl_s1n_32_ds_d2h[8] = tl_sm1_52_us_d2h[0];

  assign tl_sm1_60_us_h2d[0] = tl_s1n_32_ds_h2d[9];
  assign tl_s1n_32_ds_d2h[9] = tl_sm1_60_us_d2h[0];

  assign tl_sm1_61_us_h2d[0] = tl_s1n_32_ds_h2d[10];
  assign tl_s1n_32_ds_d2h[10] = tl_sm1_61_us_d2h[0];

  assign tl_sm1_65_us_h2d[0] = tl_s1n_32_ds_h2d[11];
  assign tl_s1n_32_ds_d2h[11] = tl_sm1_65_us_d2h[0];

  assign tl_sm1_66_us_h2d[0] = tl_s1n_32_ds_h2d[12];
  assign tl_s1n_32_ds_d2h[12] = tl_sm1_66_us_d2h[0];

  assign tl_sm1_67_us_h2d[0] = tl_s1n_32_ds_h2d[13];
  assign tl_s1n_32_ds_d2h[13] = tl_sm1_67_us_d2h[0];


  assign tl_s1n_32_us_h2d = tl_host_i;
  assign tl_host_o = tl_s1n_32_us_d2h;


  assign tl_rom_ctrl__rom_o = tl_sm1_28_ds_h2d;
  assign tl_sm1_28_ds_d2h = tl_rom_ctrl__rom_i;

  assign tl_rom_ctrl__regs_o = tl_sm1_33_ds_h2d;
  assign tl_sm1_33_ds_d2h = tl_rom_ctrl__regs_i;

  assign tl_hmac_o = tl_sm1_50_ds_h2d;
  assign tl_sm1_50_ds_d2h = tl_hmac_i;

  assign tl_keymgr_o = tl_sm1_53_ds_h2d;
  assign tl_sm1_53_ds_d2h = tl_keymgr_i;

  assign tl_kmac_o = tl_sm1_54_ds_h2d;
  assign tl_sm1_54_ds_d2h = tl_kmac_i;

  assign tl_entropy_src_o = tl_sm1_46_ds_h2d;
  assign tl_sm1_46_ds_d2h = tl_entropy_src_i;

  assign tl_csrng_o = tl_sm1_47_ds_h2d;
  assign tl_sm1_47_ds_d2h = tl_csrng_i;

  assign tl_edn0_o = tl_sm1_48_ds_h2d;
  assign tl_sm1_48_ds_d2h = tl_edn0_i;

  assign tl_otbn_o = tl_sm1_52_ds_h2d;
  assign tl_sm1_52_ds_d2h = tl_otbn_i;

  assign tl_sm3_o = tl_sm1_60_ds_h2d;
  assign tl_sm1_60_ds_d2h = tl_sm3_i;

  assign tl_sm4_o = tl_sm1_61_ds_h2d;
  assign tl_sm1_61_ds_d2h = tl_sm4_i;

  assign tl_rs_encode_o = tl_sm1_65_ds_h2d;
  assign tl_sm1_65_ds_d2h = tl_rs_encode_i;

  assign tl_rs_decode_o = tl_sm1_66_ds_h2d;
  assign tl_sm1_66_ds_d2h = tl_rs_decode_i;

  assign tl_puf_o = tl_sm1_67_ds_h2d;
  assign tl_sm1_67_ds_d2h = tl_puf_i;

  

  always_comb begin
    // default steering to generate error response if address is not within the range
    dev_sel_s1n_32 = 4'd14;
    tl_s1n_32_us_h2d_mask = tl_s1n_32_us_h2d;
    if ((tl_s1n_32_us_h2d.a_address &
         ~(ADDR_MASK_ROM_CTRL__ROM_ROT)) == ADDR_SPACE_ROM_CTRL__ROM_ROT) begin
      dev_sel_s1n_32 = 4'd0;
      tl_s1n_32_us_h2d_mask.a_address = tl_s1n_32_us_h2d.a_address & ADDR_MASK_ROM_CTRL__ROM_ROT;

    end else if ((tl_s1n_32_us_h2d.a_address &
                  ~(ADDR_MASK_ROM_CTRL__REGS_ROT)) == ADDR_SPACE_ROM_CTRL__REGS_ROT) begin
      dev_sel_s1n_32 = 4'd1;
      tl_s1n_32_us_h2d_mask.a_address = tl_s1n_32_us_h2d.a_address & ADDR_MASK_ROM_CTRL__REGS_ROT;
    
    end else if ((tl_s1n_32_us_h2d.a_address &
                  ~(ADDR_MASK_HMAC_ROT)) == ADDR_SPACE_HMAC_ROT) begin
      dev_sel_s1n_32 = 4'd2;
      tl_s1n_32_us_h2d_mask.a_address = tl_s1n_32_us_h2d.a_address & ADDR_MASK_HMAC_ROT;

    end else if ((tl_s1n_32_us_h2d.a_address &
                  ~(ADDR_MASK_KEYMGR_ROT)) == ADDR_SPACE_KEYMGR_ROT) begin
      dev_sel_s1n_32 = 4'd3;
      tl_s1n_32_us_h2d_mask.a_address = tl_s1n_32_us_h2d.a_address & ADDR_MASK_KEYMGR_ROT;

    end else if ((tl_s1n_32_us_h2d.a_address &
                  ~(ADDR_MASK_KMAC_ROT)) == ADDR_SPACE_KMAC_ROT) begin
      dev_sel_s1n_32 = 4'd4;
      tl_s1n_32_us_h2d_mask.a_address = tl_s1n_32_us_h2d.a_address & ADDR_MASK_KMAC_ROT;

    end else if ((tl_s1n_32_us_h2d.a_address &
                  ~(ADDR_MASK_ENTROPY_SRC_ROT)) == ADDR_SPACE_ENTROPY_SRC_ROT) begin
      dev_sel_s1n_32 = 4'd5;
      tl_s1n_32_us_h2d_mask.a_address = tl_s1n_32_us_h2d.a_address & ADDR_MASK_ENTROPY_SRC_ROT;

    end else if ((tl_s1n_32_us_h2d.a_address &
                  ~(ADDR_MASK_CSRNG_ROT)) == ADDR_SPACE_CSRNG_ROT) begin
      dev_sel_s1n_32 = 4'd6;
      tl_s1n_32_us_h2d_mask.a_address = tl_s1n_32_us_h2d.a_address & ADDR_MASK_CSRNG_ROT;

    end else if ((tl_s1n_32_us_h2d.a_address &
                  ~(ADDR_MASK_EDN0_ROT)) == ADDR_SPACE_EDN0_ROT) begin
      dev_sel_s1n_32 = 4'd7;
      tl_s1n_32_us_h2d_mask.a_address = tl_s1n_32_us_h2d.a_address & ADDR_MASK_EDN0_ROT;

    end else if ((tl_s1n_32_us_h2d.a_address &
                  ~(ADDR_MASK_OTBN_ROT)) == ADDR_SPACE_OTBN_ROT) begin
      dev_sel_s1n_32 = 4'd8;
      tl_s1n_32_us_h2d_mask.a_address = tl_s1n_32_us_h2d.a_address & ADDR_MASK_OTBN_ROT;

    end else if ((tl_s1n_32_us_h2d.a_address &
                  ~(ADDR_MASK_SM3)) == ADDR_SPACE_SM3) begin
      dev_sel_s1n_32 = 5'd9;
      tl_s1n_32_us_h2d_mask.a_address = tl_s1n_32_us_h2d.a_address & ADDR_MASK_SM3;

    end else if ((tl_s1n_32_us_h2d.a_address &
                  ~(ADDR_MASK_SM4)) == ADDR_SPACE_SM4) begin
      dev_sel_s1n_32 = 5'd10;
      tl_s1n_32_us_h2d_mask.a_address = tl_s1n_32_us_h2d.a_address & ADDR_MASK_SM4;
    end else if ((tl_s1n_32_us_h2d.a_address &
                  ~(ADDR_MASK_RS_ENCODE)) == ADDR_SPACE_RS_ENCODE) begin
      dev_sel_s1n_32 = 5'd11;
      tl_s1n_32_us_h2d_mask.a_address = tl_s1n_32_us_h2d.a_address & ADDR_MASK_RS_ENCODE;
    end else if ((tl_s1n_32_us_h2d.a_address &
                  ~(ADDR_MASK_RS_DECODE)) == ADDR_SPACE_RS_DECODE) begin
      dev_sel_s1n_32 = 5'd12;
      tl_s1n_32_us_h2d_mask.a_address = tl_s1n_32_us_h2d.a_address & ADDR_MASK_RS_DECODE;
    end else if ((tl_s1n_32_us_h2d.a_address &
                  ~(ADDR_MASK_PUF)) == ADDR_SPACE_PUF) begin
      dev_sel_s1n_32 = 5'd13;
      tl_s1n_32_us_h2d_mask.a_address = tl_s1n_32_us_h2d.a_address & ADDR_MASK_PUF;
    end
  end


  // Instantiation phase
 
  tlul_socket_m1 #(
    .HReqDepth (12'h0),
    .HRspDepth (12'h0),
    .DRspPass  (1'b0),
    .M         (3)
  ) u_sm1_28 (
    .clk_i        (clk_i),
    .rst_ni       (rst_ni),
    .tl_h_i       (tl_sm1_28_us_h2d),
    .tl_h_o       (tl_sm1_28_us_d2h),
    .tl_d_o       (tl_sm1_28_ds_h2d),
    .tl_d_i       (tl_sm1_28_ds_d2h)
  );
  
  tlul_socket_m1 #(
    .HReqDepth (8'h0),
    .HRspDepth (8'h0),
    .DReqPass  (1'b0),
    .DRspPass  (1'b0),
    .M         (2)
  ) u_sm1_33 (
    .clk_i        (clk_i),
    .rst_ni       (rst_ni),
    .tl_h_i       (tl_sm1_33_us_h2d),
    .tl_h_o       (tl_sm1_33_us_d2h),
    .tl_d_o       (tl_sm1_33_ds_h2d),
    .tl_d_i       (tl_sm1_33_ds_d2h)
  );
  
  tlul_socket_m1 #(
    .HReqDepth (8'h0),
    .HRspDepth (8'h0),
    .DReqPass  (1'b0),
    .DRspPass  (1'b0),
    .M         (2)
  ) u_sm1_50 (
    .clk_i        (clk_i),
    .rst_ni       (rst_ni),
    .tl_h_i       (tl_sm1_50_us_h2d),
    .tl_h_o       (tl_sm1_50_us_d2h),
    .tl_d_o       (tl_sm1_50_ds_h2d),
    .tl_d_i       (tl_sm1_50_ds_d2h)
  );
  
  tlul_socket_m1 #(
    .HReqDepth (8'h0),
    .HRspDepth (8'h0),
    .DReqPass  (1'b0),
    .DRspPass  (1'b0),
    .M         (2)
  ) u_sm1_53 (
    .clk_i        (clk_i),
    .rst_ni       (rst_ni),
    .tl_h_i       (tl_sm1_53_us_h2d),
    .tl_h_o       (tl_sm1_53_us_d2h),
    .tl_d_o       (tl_sm1_53_ds_h2d),
    .tl_d_i       (tl_sm1_53_ds_d2h)
  );

  tlul_socket_m1 #(
    .HReqDepth (8'h0),
    .HRspDepth (8'h0),
    .DReqPass  (1'b0),
    .DRspPass  (1'b0),
    .M         (2)
  ) u_sm1_54 (
    .clk_i        (clk_i),
    .rst_ni       (rst_ni),
    .tl_h_i       (tl_sm1_54_us_h2d),
    .tl_h_o       (tl_sm1_54_us_d2h),
    .tl_d_o       (tl_sm1_54_ds_h2d),
    .tl_d_i       (tl_sm1_54_ds_d2h)
  );
  
  tlul_socket_m1 #(
    .HReqDepth (8'h0),
    .HRspDepth (8'h0),
    .DReqPass  (1'b0),
    .DRspPass  (1'b0),
    .M         (2)
  ) u_sm1_46 (
    .clk_i        (clk_i),
    .rst_ni       (rst_ni),
    .tl_h_i       (tl_sm1_46_us_h2d),
    .tl_h_o       (tl_sm1_46_us_d2h),
    .tl_d_o       (tl_sm1_46_ds_h2d),
    .tl_d_i       (tl_sm1_46_ds_d2h)
  );
  tlul_socket_m1 #(
    .HReqDepth (8'h0),
    .HRspDepth (8'h0),
    .DReqPass  (1'b0),
    .DRspPass  (1'b0),
    .M         (2)
  ) u_sm1_47 (
    .clk_i        (clk_i),
    .rst_ni       (rst_ni),
    .tl_h_i       (tl_sm1_47_us_h2d),
    .tl_h_o       (tl_sm1_47_us_d2h),
    .tl_d_o       (tl_sm1_47_ds_h2d),
    .tl_d_i       (tl_sm1_47_ds_d2h)
  );
  tlul_socket_m1 #(
    .HReqDepth (8'h0),
    .HRspDepth (8'h0),
    .DReqPass  (1'b0),
    .DRspPass  (1'b0),
    .M         (2)
  ) u_sm1_48 (
    .clk_i        (clk_i),
    .rst_ni       (rst_ni),
    .tl_h_i       (tl_sm1_48_us_h2d),
    .tl_h_o       (tl_sm1_48_us_d2h),
    .tl_d_o       (tl_sm1_48_ds_h2d),
    .tl_d_i       (tl_sm1_48_ds_d2h)
  );

  tlul_socket_m1 #(
    .HReqDepth (8'h0),
    .HRspDepth (8'h0),
    .DReqPass  (1'b0),
    .DRspPass  (1'b0),
    .M         (2)
  ) u_sm1_52 (
    .clk_i        (clk_i),
    .rst_ni       (rst_ni),
    .tl_h_i       (tl_sm1_52_us_h2d),
    .tl_h_o       (tl_sm1_52_us_d2h),
    .tl_d_o       (tl_sm1_52_ds_h2d),
    .tl_d_i       (tl_sm1_52_ds_d2h)
  );
  tlul_socket_m1 #(
    .HReqDepth (8'h0),
    .HRspDepth (8'h0),
    .DReqPass  (1'b0),
    .DRspPass  (1'b0),
    .M         (2)
  ) u_sm1_60 (
    .clk_i        (clk_i),
    .rst_ni       (rst_ni),
    .tl_h_i       (tl_sm1_60_us_h2d),
    .tl_h_o       (tl_sm1_60_us_d2h),
    .tl_d_o       (tl_sm1_60_ds_h2d),
    .tl_d_i       (tl_sm1_60_ds_d2h)
  );
  tlul_socket_m1 #(
    .HReqDepth (8'h0),
    .HRspDepth (8'h0),
    .DReqPass  (1'b0),
    .DRspPass  (1'b0),
    .M         (2)
  ) u_sm1_61 (
    .clk_i        (clk_i),
    .rst_ni       (rst_ni),
    .tl_h_i       (tl_sm1_61_us_h2d),
    .tl_h_o       (tl_sm1_61_us_d2h),
    .tl_d_o       (tl_sm1_61_ds_h2d),
    .tl_d_i       (tl_sm1_61_ds_d2h)
  );
  tlul_socket_m1 #(
    .HReqDepth (8'h0),
    .HRspDepth (8'h0),
    .DReqPass  (1'b0),
    .DRspPass  (1'b0),
    .M         (2)
  ) u_sm1_65 (
    .clk_i        (clk_i),
    .rst_ni       (rst_ni),
    .tl_h_i       (tl_sm1_65_us_h2d),
    .tl_h_o       (tl_sm1_65_us_d2h),
    .tl_d_o       (tl_sm1_65_ds_h2d),
    .tl_d_i       (tl_sm1_65_ds_d2h)
  );
  tlul_socket_m1 #(
    .HReqDepth (8'h0),
    .HRspDepth (8'h0),
    .DReqPass  (1'b0),
    .DRspPass  (1'b0),
    .M         (2)
  ) u_sm1_66 (
    .clk_i        (clk_i),
    .rst_ni       (rst_ni),
    .tl_h_i       (tl_sm1_66_us_h2d),
    .tl_h_o       (tl_sm1_66_us_d2h),
    .tl_d_o       (tl_sm1_66_ds_h2d),
    .tl_d_i       (tl_sm1_66_ds_d2h)
  );
  tlul_socket_m1 #(
    .HReqDepth (8'h0),
    .HRspDepth (8'h0),
    .DReqPass  (1'b0),
    .DRspPass  (1'b0),
    .M         (2)
  ) u_sm1_67 (
    .clk_i        (clk_i),
    .rst_ni       (rst_ni),
    .tl_h_i       (tl_sm1_67_us_h2d),
    .tl_h_o       (tl_sm1_67_us_d2h),
    .tl_d_o       (tl_sm1_67_ds_h2d),
    .tl_d_i       (tl_sm1_67_ds_d2h)
  );

  tlul_socket_1n #(
    .HReqDepth (4'h0),
    .HRspDepth (4'h0),
    .DReqDepth (56'h0),
    .DRspDepth (56'h0),
    .N         (14)
  ) u_s1n_32 (
    .clk_i        (clk_i),
    .rst_ni       (rst_ni),
    .tl_h_i       (tl_s1n_32_us_h2d_mask),
    .tl_h_o       (tl_s1n_32_us_d2h),
    .tl_d_o       (tl_s1n_32_ds_h2d),
    .tl_d_i       (tl_s1n_32_ds_d2h),
    .dev_select_i (dev_sel_s1n_32)
  );
 

endmodule
