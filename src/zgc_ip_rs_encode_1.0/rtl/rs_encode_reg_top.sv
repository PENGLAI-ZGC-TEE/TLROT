// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`

`include "prim_assert.sv"

module rs_encode_reg_top (
  input clk_i,
  input rst_ni,
  input  tlul_pkg::tl_h2d_t tl_i,
  output tlul_pkg::tl_d2h_t tl_o,
  // To HW
  output rs_encode_reg_pkg::rs_encode_reg2hw_t reg2hw, // Write
  input  rs_encode_reg_pkg::rs_encode_hw2reg_t hw2reg, // Read

  // Integrity check errors
  output logic intg_err_o,

  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import rs_encode_reg_pkg::* ;

  localparam int AW = 9;
  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;
  logic reg_busy;

  tlul_pkg::tl_h2d_t tl_reg_h2d;
  tlul_pkg::tl_d2h_t tl_reg_d2h;


  // incoming payload check
  logic intg_err;
  tlul_cmd_intg_chk u_chk (
    .tl_i(tl_i),
    .err_o(intg_err)
  );

  // also check for spurious write enables
  logic reg_we_err;
  logic [93:0] reg_we_check;
  prim_reg_we_check #(
    .OneHotWidth(94)
  ) u_prim_reg_we_check (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .oh_i  (reg_we_check),
    .en_i  (reg_we && !addrmiss),
    .err_o (reg_we_err)
  );

  logic err_q;
  always_ff @(posedge clk_i or negedge rst_ni) begin
    if (!rst_ni) begin
      err_q <= '0;
    end else if (intg_err || reg_we_err) begin
      err_q <= 1'b1;
    end
  end

  // integrity error output is permanent and should be used for alert generation
  // register errors are transactional
  assign intg_err_o = err_q | intg_err | reg_we_err;

  // outgoing integrity generation
  tlul_pkg::tl_d2h_t tl_o_pre;
  tlul_rsp_intg_gen #(
    .EnableRspIntgGen(1),
    .EnableDataIntgGen(1)
  ) u_rsp_intg_gen (
    .tl_i(tl_o_pre),
    .tl_o(tl_o)
  );

  assign tl_reg_h2d = tl_i;
  assign tl_o_pre   = tl_reg_d2h;

  tlul_adapter_reg #(
    .RegAw(AW),
    .RegDw(DW),
    .EnableDataIntgGen(0)
  ) u_reg_if (
    .clk_i  (clk_i),
    .rst_ni (rst_ni),

    .tl_i (tl_reg_h2d),
    .tl_o (tl_reg_d2h),

    .en_ifetch_i(prim_mubi_pkg::MuBi4False),
    .intg_error_o(),

    .we_o    (reg_we),
    .re_o    (reg_re),
    .addr_o  (reg_addr),
    .wdata_o (reg_wdata),
    .be_o    (reg_be),
    .busy_i  (reg_busy),
    .rdata_i (reg_rdata),
    .error_i (reg_error)
  );

  // cdc oversampling signals

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err | intg_err;

  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic ctrl_signals_we;
  logic ctrl_signals_encode_en_qs;
  logic ctrl_signals_encode_en_wd;
  logic ctrl_signals_clrn_qs;
  logic ctrl_signals_clrn_wd;
  logic state_signals_valid_bit_qs;
  logic state_signals_ready_bit_qs;
  logic data_in_0_we;
  logic [31:0] data_in_0_qs;
  logic [31:0] data_in_0_wd;
  logic data_in_1_we;
  logic [31:0] data_in_1_qs;
  logic [31:0] data_in_1_wd;
  logic data_in_2_we;
  logic [31:0] data_in_2_qs;
  logic [31:0] data_in_2_wd;
  logic data_in_3_we;
  logic [31:0] data_in_3_qs;
  logic [31:0] data_in_3_wd;
  logic data_in_4_we;
  logic [31:0] data_in_4_qs;
  logic [31:0] data_in_4_wd;
  logic data_in_5_we;
  logic [31:0] data_in_5_qs;
  logic [31:0] data_in_5_wd;
  logic data_in_6_we;
  logic [31:0] data_in_6_qs;
  logic [31:0] data_in_6_wd;
  logic data_in_7_we;
  logic [31:0] data_in_7_qs;
  logic [31:0] data_in_7_wd;
  logic data_in_8_we;
  logic [31:0] data_in_8_qs;
  logic [31:0] data_in_8_wd;
  logic data_in_9_we;
  logic [31:0] data_in_9_qs;
  logic [31:0] data_in_9_wd;
  logic data_in_10_we;
  logic [31:0] data_in_10_qs;
  logic [31:0] data_in_10_wd;
  logic data_in_11_we;
  logic [31:0] data_in_11_qs;
  logic [31:0] data_in_11_wd;
  logic data_in_12_we;
  logic [31:0] data_in_12_qs;
  logic [31:0] data_in_12_wd;
  logic data_in_13_we;
  logic [31:0] data_in_13_qs;
  logic [31:0] data_in_13_wd;
  logic data_in_14_we;
  logic [31:0] data_in_14_qs;
  logic [31:0] data_in_14_wd;
  logic data_in_15_we;
  logic [31:0] data_in_15_qs;
  logic [31:0] data_in_15_wd;
  logic data_in_16_we;
  logic [31:0] data_in_16_qs;
  logic [31:0] data_in_16_wd;
  logic data_in_17_we;
  logic [31:0] data_in_17_qs;
  logic [31:0] data_in_17_wd;
  logic data_in_18_we;
  logic [31:0] data_in_18_qs;
  logic [31:0] data_in_18_wd;
  logic data_in_19_we;
  logic [31:0] data_in_19_qs;
  logic [31:0] data_in_19_wd;
  logic data_in_20_we;
  logic [31:0] data_in_20_qs;
  logic [31:0] data_in_20_wd;
  logic data_in_21_we;
  logic [31:0] data_in_21_qs;
  logic [31:0] data_in_21_wd;
  logic data_in_22_we;
  logic [31:0] data_in_22_qs;
  logic [31:0] data_in_22_wd;
  logic data_in_23_we;
  logic [31:0] data_in_23_qs;
  logic [31:0] data_in_23_wd;
  logic data_in_24_we;
  logic [31:0] data_in_24_qs;
  logic [31:0] data_in_24_wd;
  logic data_in_25_we;
  logic [31:0] data_in_25_qs;
  logic [31:0] data_in_25_wd;
  logic data_in_26_we;
  logic [31:0] data_in_26_qs;
  logic [31:0] data_in_26_wd;
  logic data_in_27_we;
  logic [31:0] data_in_27_qs;
  logic [31:0] data_in_27_wd;
  logic data_in_28_we;
  logic [31:0] data_in_28_qs;
  logic [31:0] data_in_28_wd;
  logic data_in_29_we;
  logic [31:0] data_in_29_qs;
  logic [31:0] data_in_29_wd;
  logic data_in_30_we;
  logic [31:0] data_in_30_qs;
  logic [31:0] data_in_30_wd;
  logic data_in_31_we;
  logic [31:0] data_in_31_qs;
  logic [31:0] data_in_31_wd;
  logic data_in_32_we;
  logic [31:0] data_in_32_qs;
  logic [31:0] data_in_32_wd;
  logic data_in_33_we;
  logic [31:0] data_in_33_qs;
  logic [31:0] data_in_33_wd;
  logic data_in_34_we;
  logic [31:0] data_in_34_qs;
  logic [31:0] data_in_34_wd;
  logic data_in_35_we;
  logic [31:0] data_in_35_qs;
  logic [31:0] data_in_35_wd;
  logic data_in_36_we;
  logic [31:0] data_in_36_qs;
  logic [31:0] data_in_36_wd;
  logic data_in_37_we;
  logic [31:0] data_in_37_qs;
  logic [31:0] data_in_37_wd;
  logic data_in_38_we;
  logic [31:0] data_in_38_qs;
  logic [31:0] data_in_38_wd;
  logic data_in_39_we;
  logic [31:0] data_in_39_qs;
  logic [31:0] data_in_39_wd;
  logic data_in_40_we;
  logic [31:0] data_in_40_qs;
  logic [31:0] data_in_40_wd;
  logic data_in_41_we;
  logic [31:0] data_in_41_qs;
  logic [31:0] data_in_41_wd;
  logic [31:0] encoded_data_out_0_qs;
  logic [31:0] encoded_data_out_1_qs;
  logic [31:0] encoded_data_out_2_qs;
  logic [31:0] encoded_data_out_3_qs;
  logic [31:0] encoded_data_out_4_qs;
  logic [31:0] encoded_data_out_5_qs;
  logic [31:0] encoded_data_out_6_qs;
  logic [31:0] encoded_data_out_7_qs;
  logic [31:0] encoded_data_out_8_qs;
  logic [31:0] encoded_data_out_9_qs;
  logic [31:0] encoded_data_out_10_qs;
  logic [31:0] encoded_data_out_11_qs;
  logic [31:0] encoded_data_out_12_qs;
  logic [31:0] encoded_data_out_13_qs;
  logic [31:0] encoded_data_out_14_qs;
  logic [31:0] encoded_data_out_15_qs;
  logic [31:0] encoded_data_out_16_qs;
  logic [31:0] encoded_data_out_17_qs;
  logic [31:0] encoded_data_out_18_qs;
  logic [31:0] encoded_data_out_19_qs;
  logic [31:0] encoded_data_out_20_qs;
  logic [31:0] encoded_data_out_21_qs;
  logic [31:0] encoded_data_out_22_qs;
  logic [31:0] encoded_data_out_23_qs;
  logic [31:0] encoded_data_out_24_qs;
  logic [31:0] encoded_data_out_25_qs;
  logic [31:0] encoded_data_out_26_qs;
  logic [31:0] encoded_data_out_27_qs;
  logic [31:0] encoded_data_out_28_qs;
  logic [31:0] encoded_data_out_29_qs;
  logic [31:0] encoded_data_out_30_qs;
  logic [31:0] encoded_data_out_31_qs;
  logic [31:0] encoded_data_out_32_qs;
  logic [31:0] encoded_data_out_33_qs;
  logic [31:0] encoded_data_out_34_qs;
  logic [31:0] encoded_data_out_35_qs;
  logic [31:0] encoded_data_out_36_qs;
  logic [31:0] encoded_data_out_37_qs;
  logic [31:0] encoded_data_out_38_qs;
  logic [31:0] encoded_data_out_39_qs;
  logic [31:0] encoded_data_out_40_qs;
  logic [31:0] encoded_data_out_41_qs;
  logic [31:0] encoded_data_out_42_qs;
  logic [31:0] encoded_data_out_43_qs;
  logic [31:0] encoded_data_out_44_qs;
  logic [31:0] encoded_data_out_45_qs;
  logic [31:0] encoded_data_out_46_qs;
  logic [31:0] encoded_data_out_47_qs;
  logic [31:0] encoded_data_out_48_qs;
  logic [31:0] encoded_data_out_49_qs;

  // Register instances
  // R[ctrl_signals]: V(False)
  logic ctrl_signals_qe;
  logic [1:0] ctrl_signals_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_ctrl_signals0_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&ctrl_signals_flds_we),
    .q_o(ctrl_signals_qe)
  );
  //   F[encode_en]: 0:0
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ctrl_signals_encode_en (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ctrl_signals_we),
    .wd     (ctrl_signals_encode_en_wd),

    // from internal hardware
    .de     (hw2reg.ctrl_signals.encode_en.de),
    .d      (hw2reg.ctrl_signals.encode_en.d),

    // to internal hardware
    .qe     (ctrl_signals_flds_we[0]),
    .q      (reg2hw.ctrl_signals.encode_en.q),
    .ds     (),

    // to register interface (read)
    .qs     (ctrl_signals_encode_en_qs)
  );
  assign reg2hw.ctrl_signals.encode_en.qe = ctrl_signals_qe;

  //   F[clrn]: 1:1
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1)
  ) u_ctrl_signals_clrn (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ctrl_signals_we),
    .wd     (ctrl_signals_clrn_wd),

    // from internal hardware
    .de     (hw2reg.ctrl_signals.clrn.de),
    .d      (hw2reg.ctrl_signals.clrn.d),

    // to internal hardware
    .qe     (ctrl_signals_flds_we[1]),
    .q      (reg2hw.ctrl_signals.clrn.q),
    .ds     (),

    // to register interface (read)
    .qs     (ctrl_signals_clrn_qs)
  );
  assign reg2hw.ctrl_signals.clrn.qe = ctrl_signals_qe;


  // R[state_signals]: V(False)
  //   F[valid_bit]: 0:0
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0)
  ) u_state_signals_valid_bit (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.state_signals.valid_bit.de),
    .d      (hw2reg.state_signals.valid_bit.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.state_signals.valid_bit.q),
    .ds     (),

    // to register interface (read)
    .qs     (state_signals_valid_bit_qs)
  );

  //   F[ready_bit]: 1:1
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0)
  ) u_state_signals_ready_bit (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.state_signals.ready_bit.de),
    .d      (hw2reg.state_signals.ready_bit.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.state_signals.ready_bit.q),
    .ds     (),

    // to register interface (read)
    .qs     (state_signals_ready_bit_qs)
  );


  // Subregister 0 of Multireg data_in
  // R[data_in_0]: V(False)
  logic data_in_0_qe;
  logic [0:0] data_in_0_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_data_in0_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&data_in_0_flds_we),
    .q_o(data_in_0_qe)
  );
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_data_in_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (data_in_0_we),
    .wd     (data_in_0_wd),

    // from internal hardware
    .de     (hw2reg.data_in[0].de),
    .d      (hw2reg.data_in[0].d),

    // to internal hardware
    .qe     (data_in_0_flds_we[0]),
    .q      (reg2hw.data_in[0].q),
    .ds     (),

    // to register interface (read)
    .qs     (data_in_0_qs)
  );
  assign reg2hw.data_in[0].qe = data_in_0_qe;


  // Subregister 1 of Multireg data_in
  // R[data_in_1]: V(False)
  logic data_in_1_qe;
  logic [0:0] data_in_1_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_data_in1_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&data_in_1_flds_we),
    .q_o(data_in_1_qe)
  );
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_data_in_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (data_in_1_we),
    .wd     (data_in_1_wd),

    // from internal hardware
    .de     (hw2reg.data_in[1].de),
    .d      (hw2reg.data_in[1].d),

    // to internal hardware
    .qe     (data_in_1_flds_we[0]),
    .q      (reg2hw.data_in[1].q),
    .ds     (),

    // to register interface (read)
    .qs     (data_in_1_qs)
  );
  assign reg2hw.data_in[1].qe = data_in_1_qe;


  // Subregister 2 of Multireg data_in
  // R[data_in_2]: V(False)
  logic data_in_2_qe;
  logic [0:0] data_in_2_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_data_in2_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&data_in_2_flds_we),
    .q_o(data_in_2_qe)
  );
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_data_in_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (data_in_2_we),
    .wd     (data_in_2_wd),

    // from internal hardware
    .de     (hw2reg.data_in[2].de),
    .d      (hw2reg.data_in[2].d),

    // to internal hardware
    .qe     (data_in_2_flds_we[0]),
    .q      (reg2hw.data_in[2].q),
    .ds     (),

    // to register interface (read)
    .qs     (data_in_2_qs)
  );
  assign reg2hw.data_in[2].qe = data_in_2_qe;


  // Subregister 3 of Multireg data_in
  // R[data_in_3]: V(False)
  logic data_in_3_qe;
  logic [0:0] data_in_3_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_data_in3_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&data_in_3_flds_we),
    .q_o(data_in_3_qe)
  );
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_data_in_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (data_in_3_we),
    .wd     (data_in_3_wd),

    // from internal hardware
    .de     (hw2reg.data_in[3].de),
    .d      (hw2reg.data_in[3].d),

    // to internal hardware
    .qe     (data_in_3_flds_we[0]),
    .q      (reg2hw.data_in[3].q),
    .ds     (),

    // to register interface (read)
    .qs     (data_in_3_qs)
  );
  assign reg2hw.data_in[3].qe = data_in_3_qe;


  // Subregister 4 of Multireg data_in
  // R[data_in_4]: V(False)
  logic data_in_4_qe;
  logic [0:0] data_in_4_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_data_in4_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&data_in_4_flds_we),
    .q_o(data_in_4_qe)
  );
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_data_in_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (data_in_4_we),
    .wd     (data_in_4_wd),

    // from internal hardware
    .de     (hw2reg.data_in[4].de),
    .d      (hw2reg.data_in[4].d),

    // to internal hardware
    .qe     (data_in_4_flds_we[0]),
    .q      (reg2hw.data_in[4].q),
    .ds     (),

    // to register interface (read)
    .qs     (data_in_4_qs)
  );
  assign reg2hw.data_in[4].qe = data_in_4_qe;


  // Subregister 5 of Multireg data_in
  // R[data_in_5]: V(False)
  logic data_in_5_qe;
  logic [0:0] data_in_5_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_data_in5_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&data_in_5_flds_we),
    .q_o(data_in_5_qe)
  );
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_data_in_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (data_in_5_we),
    .wd     (data_in_5_wd),

    // from internal hardware
    .de     (hw2reg.data_in[5].de),
    .d      (hw2reg.data_in[5].d),

    // to internal hardware
    .qe     (data_in_5_flds_we[0]),
    .q      (reg2hw.data_in[5].q),
    .ds     (),

    // to register interface (read)
    .qs     (data_in_5_qs)
  );
  assign reg2hw.data_in[5].qe = data_in_5_qe;


  // Subregister 6 of Multireg data_in
  // R[data_in_6]: V(False)
  logic data_in_6_qe;
  logic [0:0] data_in_6_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_data_in6_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&data_in_6_flds_we),
    .q_o(data_in_6_qe)
  );
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_data_in_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (data_in_6_we),
    .wd     (data_in_6_wd),

    // from internal hardware
    .de     (hw2reg.data_in[6].de),
    .d      (hw2reg.data_in[6].d),

    // to internal hardware
    .qe     (data_in_6_flds_we[0]),
    .q      (reg2hw.data_in[6].q),
    .ds     (),

    // to register interface (read)
    .qs     (data_in_6_qs)
  );
  assign reg2hw.data_in[6].qe = data_in_6_qe;


  // Subregister 7 of Multireg data_in
  // R[data_in_7]: V(False)
  logic data_in_7_qe;
  logic [0:0] data_in_7_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_data_in7_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&data_in_7_flds_we),
    .q_o(data_in_7_qe)
  );
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_data_in_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (data_in_7_we),
    .wd     (data_in_7_wd),

    // from internal hardware
    .de     (hw2reg.data_in[7].de),
    .d      (hw2reg.data_in[7].d),

    // to internal hardware
    .qe     (data_in_7_flds_we[0]),
    .q      (reg2hw.data_in[7].q),
    .ds     (),

    // to register interface (read)
    .qs     (data_in_7_qs)
  );
  assign reg2hw.data_in[7].qe = data_in_7_qe;


  // Subregister 8 of Multireg data_in
  // R[data_in_8]: V(False)
  logic data_in_8_qe;
  logic [0:0] data_in_8_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_data_in8_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&data_in_8_flds_we),
    .q_o(data_in_8_qe)
  );
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_data_in_8 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (data_in_8_we),
    .wd     (data_in_8_wd),

    // from internal hardware
    .de     (hw2reg.data_in[8].de),
    .d      (hw2reg.data_in[8].d),

    // to internal hardware
    .qe     (data_in_8_flds_we[0]),
    .q      (reg2hw.data_in[8].q),
    .ds     (),

    // to register interface (read)
    .qs     (data_in_8_qs)
  );
  assign reg2hw.data_in[8].qe = data_in_8_qe;


  // Subregister 9 of Multireg data_in
  // R[data_in_9]: V(False)
  logic data_in_9_qe;
  logic [0:0] data_in_9_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_data_in9_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&data_in_9_flds_we),
    .q_o(data_in_9_qe)
  );
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_data_in_9 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (data_in_9_we),
    .wd     (data_in_9_wd),

    // from internal hardware
    .de     (hw2reg.data_in[9].de),
    .d      (hw2reg.data_in[9].d),

    // to internal hardware
    .qe     (data_in_9_flds_we[0]),
    .q      (reg2hw.data_in[9].q),
    .ds     (),

    // to register interface (read)
    .qs     (data_in_9_qs)
  );
  assign reg2hw.data_in[9].qe = data_in_9_qe;


  // Subregister 10 of Multireg data_in
  // R[data_in_10]: V(False)
  logic data_in_10_qe;
  logic [0:0] data_in_10_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_data_in10_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&data_in_10_flds_we),
    .q_o(data_in_10_qe)
  );
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_data_in_10 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (data_in_10_we),
    .wd     (data_in_10_wd),

    // from internal hardware
    .de     (hw2reg.data_in[10].de),
    .d      (hw2reg.data_in[10].d),

    // to internal hardware
    .qe     (data_in_10_flds_we[0]),
    .q      (reg2hw.data_in[10].q),
    .ds     (),

    // to register interface (read)
    .qs     (data_in_10_qs)
  );
  assign reg2hw.data_in[10].qe = data_in_10_qe;


  // Subregister 11 of Multireg data_in
  // R[data_in_11]: V(False)
  logic data_in_11_qe;
  logic [0:0] data_in_11_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_data_in11_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&data_in_11_flds_we),
    .q_o(data_in_11_qe)
  );
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_data_in_11 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (data_in_11_we),
    .wd     (data_in_11_wd),

    // from internal hardware
    .de     (hw2reg.data_in[11].de),
    .d      (hw2reg.data_in[11].d),

    // to internal hardware
    .qe     (data_in_11_flds_we[0]),
    .q      (reg2hw.data_in[11].q),
    .ds     (),

    // to register interface (read)
    .qs     (data_in_11_qs)
  );
  assign reg2hw.data_in[11].qe = data_in_11_qe;


  // Subregister 12 of Multireg data_in
  // R[data_in_12]: V(False)
  logic data_in_12_qe;
  logic [0:0] data_in_12_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_data_in12_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&data_in_12_flds_we),
    .q_o(data_in_12_qe)
  );
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_data_in_12 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (data_in_12_we),
    .wd     (data_in_12_wd),

    // from internal hardware
    .de     (hw2reg.data_in[12].de),
    .d      (hw2reg.data_in[12].d),

    // to internal hardware
    .qe     (data_in_12_flds_we[0]),
    .q      (reg2hw.data_in[12].q),
    .ds     (),

    // to register interface (read)
    .qs     (data_in_12_qs)
  );
  assign reg2hw.data_in[12].qe = data_in_12_qe;


  // Subregister 13 of Multireg data_in
  // R[data_in_13]: V(False)
  logic data_in_13_qe;
  logic [0:0] data_in_13_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_data_in13_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&data_in_13_flds_we),
    .q_o(data_in_13_qe)
  );
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_data_in_13 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (data_in_13_we),
    .wd     (data_in_13_wd),

    // from internal hardware
    .de     (hw2reg.data_in[13].de),
    .d      (hw2reg.data_in[13].d),

    // to internal hardware
    .qe     (data_in_13_flds_we[0]),
    .q      (reg2hw.data_in[13].q),
    .ds     (),

    // to register interface (read)
    .qs     (data_in_13_qs)
  );
  assign reg2hw.data_in[13].qe = data_in_13_qe;


  // Subregister 14 of Multireg data_in
  // R[data_in_14]: V(False)
  logic data_in_14_qe;
  logic [0:0] data_in_14_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_data_in14_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&data_in_14_flds_we),
    .q_o(data_in_14_qe)
  );
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_data_in_14 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (data_in_14_we),
    .wd     (data_in_14_wd),

    // from internal hardware
    .de     (hw2reg.data_in[14].de),
    .d      (hw2reg.data_in[14].d),

    // to internal hardware
    .qe     (data_in_14_flds_we[0]),
    .q      (reg2hw.data_in[14].q),
    .ds     (),

    // to register interface (read)
    .qs     (data_in_14_qs)
  );
  assign reg2hw.data_in[14].qe = data_in_14_qe;


  // Subregister 15 of Multireg data_in
  // R[data_in_15]: V(False)
  logic data_in_15_qe;
  logic [0:0] data_in_15_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_data_in15_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&data_in_15_flds_we),
    .q_o(data_in_15_qe)
  );
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_data_in_15 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (data_in_15_we),
    .wd     (data_in_15_wd),

    // from internal hardware
    .de     (hw2reg.data_in[15].de),
    .d      (hw2reg.data_in[15].d),

    // to internal hardware
    .qe     (data_in_15_flds_we[0]),
    .q      (reg2hw.data_in[15].q),
    .ds     (),

    // to register interface (read)
    .qs     (data_in_15_qs)
  );
  assign reg2hw.data_in[15].qe = data_in_15_qe;


  // Subregister 16 of Multireg data_in
  // R[data_in_16]: V(False)
  logic data_in_16_qe;
  logic [0:0] data_in_16_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_data_in16_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&data_in_16_flds_we),
    .q_o(data_in_16_qe)
  );
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_data_in_16 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (data_in_16_we),
    .wd     (data_in_16_wd),

    // from internal hardware
    .de     (hw2reg.data_in[16].de),
    .d      (hw2reg.data_in[16].d),

    // to internal hardware
    .qe     (data_in_16_flds_we[0]),
    .q      (reg2hw.data_in[16].q),
    .ds     (),

    // to register interface (read)
    .qs     (data_in_16_qs)
  );
  assign reg2hw.data_in[16].qe = data_in_16_qe;


  // Subregister 17 of Multireg data_in
  // R[data_in_17]: V(False)
  logic data_in_17_qe;
  logic [0:0] data_in_17_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_data_in17_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&data_in_17_flds_we),
    .q_o(data_in_17_qe)
  );
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_data_in_17 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (data_in_17_we),
    .wd     (data_in_17_wd),

    // from internal hardware
    .de     (hw2reg.data_in[17].de),
    .d      (hw2reg.data_in[17].d),

    // to internal hardware
    .qe     (data_in_17_flds_we[0]),
    .q      (reg2hw.data_in[17].q),
    .ds     (),

    // to register interface (read)
    .qs     (data_in_17_qs)
  );
  assign reg2hw.data_in[17].qe = data_in_17_qe;


  // Subregister 18 of Multireg data_in
  // R[data_in_18]: V(False)
  logic data_in_18_qe;
  logic [0:0] data_in_18_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_data_in18_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&data_in_18_flds_we),
    .q_o(data_in_18_qe)
  );
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_data_in_18 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (data_in_18_we),
    .wd     (data_in_18_wd),

    // from internal hardware
    .de     (hw2reg.data_in[18].de),
    .d      (hw2reg.data_in[18].d),

    // to internal hardware
    .qe     (data_in_18_flds_we[0]),
    .q      (reg2hw.data_in[18].q),
    .ds     (),

    // to register interface (read)
    .qs     (data_in_18_qs)
  );
  assign reg2hw.data_in[18].qe = data_in_18_qe;


  // Subregister 19 of Multireg data_in
  // R[data_in_19]: V(False)
  logic data_in_19_qe;
  logic [0:0] data_in_19_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_data_in19_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&data_in_19_flds_we),
    .q_o(data_in_19_qe)
  );
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_data_in_19 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (data_in_19_we),
    .wd     (data_in_19_wd),

    // from internal hardware
    .de     (hw2reg.data_in[19].de),
    .d      (hw2reg.data_in[19].d),

    // to internal hardware
    .qe     (data_in_19_flds_we[0]),
    .q      (reg2hw.data_in[19].q),
    .ds     (),

    // to register interface (read)
    .qs     (data_in_19_qs)
  );
  assign reg2hw.data_in[19].qe = data_in_19_qe;


  // Subregister 20 of Multireg data_in
  // R[data_in_20]: V(False)
  logic data_in_20_qe;
  logic [0:0] data_in_20_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_data_in20_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&data_in_20_flds_we),
    .q_o(data_in_20_qe)
  );
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_data_in_20 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (data_in_20_we),
    .wd     (data_in_20_wd),

    // from internal hardware
    .de     (hw2reg.data_in[20].de),
    .d      (hw2reg.data_in[20].d),

    // to internal hardware
    .qe     (data_in_20_flds_we[0]),
    .q      (reg2hw.data_in[20].q),
    .ds     (),

    // to register interface (read)
    .qs     (data_in_20_qs)
  );
  assign reg2hw.data_in[20].qe = data_in_20_qe;


  // Subregister 21 of Multireg data_in
  // R[data_in_21]: V(False)
  logic data_in_21_qe;
  logic [0:0] data_in_21_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_data_in21_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&data_in_21_flds_we),
    .q_o(data_in_21_qe)
  );
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_data_in_21 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (data_in_21_we),
    .wd     (data_in_21_wd),

    // from internal hardware
    .de     (hw2reg.data_in[21].de),
    .d      (hw2reg.data_in[21].d),

    // to internal hardware
    .qe     (data_in_21_flds_we[0]),
    .q      (reg2hw.data_in[21].q),
    .ds     (),

    // to register interface (read)
    .qs     (data_in_21_qs)
  );
  assign reg2hw.data_in[21].qe = data_in_21_qe;


  // Subregister 22 of Multireg data_in
  // R[data_in_22]: V(False)
  logic data_in_22_qe;
  logic [0:0] data_in_22_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_data_in22_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&data_in_22_flds_we),
    .q_o(data_in_22_qe)
  );
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_data_in_22 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (data_in_22_we),
    .wd     (data_in_22_wd),

    // from internal hardware
    .de     (hw2reg.data_in[22].de),
    .d      (hw2reg.data_in[22].d),

    // to internal hardware
    .qe     (data_in_22_flds_we[0]),
    .q      (reg2hw.data_in[22].q),
    .ds     (),

    // to register interface (read)
    .qs     (data_in_22_qs)
  );
  assign reg2hw.data_in[22].qe = data_in_22_qe;


  // Subregister 23 of Multireg data_in
  // R[data_in_23]: V(False)
  logic data_in_23_qe;
  logic [0:0] data_in_23_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_data_in23_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&data_in_23_flds_we),
    .q_o(data_in_23_qe)
  );
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_data_in_23 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (data_in_23_we),
    .wd     (data_in_23_wd),

    // from internal hardware
    .de     (hw2reg.data_in[23].de),
    .d      (hw2reg.data_in[23].d),

    // to internal hardware
    .qe     (data_in_23_flds_we[0]),
    .q      (reg2hw.data_in[23].q),
    .ds     (),

    // to register interface (read)
    .qs     (data_in_23_qs)
  );
  assign reg2hw.data_in[23].qe = data_in_23_qe;


  // Subregister 24 of Multireg data_in
  // R[data_in_24]: V(False)
  logic data_in_24_qe;
  logic [0:0] data_in_24_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_data_in24_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&data_in_24_flds_we),
    .q_o(data_in_24_qe)
  );
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_data_in_24 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (data_in_24_we),
    .wd     (data_in_24_wd),

    // from internal hardware
    .de     (hw2reg.data_in[24].de),
    .d      (hw2reg.data_in[24].d),

    // to internal hardware
    .qe     (data_in_24_flds_we[0]),
    .q      (reg2hw.data_in[24].q),
    .ds     (),

    // to register interface (read)
    .qs     (data_in_24_qs)
  );
  assign reg2hw.data_in[24].qe = data_in_24_qe;


  // Subregister 25 of Multireg data_in
  // R[data_in_25]: V(False)
  logic data_in_25_qe;
  logic [0:0] data_in_25_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_data_in25_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&data_in_25_flds_we),
    .q_o(data_in_25_qe)
  );
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_data_in_25 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (data_in_25_we),
    .wd     (data_in_25_wd),

    // from internal hardware
    .de     (hw2reg.data_in[25].de),
    .d      (hw2reg.data_in[25].d),

    // to internal hardware
    .qe     (data_in_25_flds_we[0]),
    .q      (reg2hw.data_in[25].q),
    .ds     (),

    // to register interface (read)
    .qs     (data_in_25_qs)
  );
  assign reg2hw.data_in[25].qe = data_in_25_qe;


  // Subregister 26 of Multireg data_in
  // R[data_in_26]: V(False)
  logic data_in_26_qe;
  logic [0:0] data_in_26_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_data_in26_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&data_in_26_flds_we),
    .q_o(data_in_26_qe)
  );
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_data_in_26 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (data_in_26_we),
    .wd     (data_in_26_wd),

    // from internal hardware
    .de     (hw2reg.data_in[26].de),
    .d      (hw2reg.data_in[26].d),

    // to internal hardware
    .qe     (data_in_26_flds_we[0]),
    .q      (reg2hw.data_in[26].q),
    .ds     (),

    // to register interface (read)
    .qs     (data_in_26_qs)
  );
  assign reg2hw.data_in[26].qe = data_in_26_qe;


  // Subregister 27 of Multireg data_in
  // R[data_in_27]: V(False)
  logic data_in_27_qe;
  logic [0:0] data_in_27_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_data_in27_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&data_in_27_flds_we),
    .q_o(data_in_27_qe)
  );
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_data_in_27 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (data_in_27_we),
    .wd     (data_in_27_wd),

    // from internal hardware
    .de     (hw2reg.data_in[27].de),
    .d      (hw2reg.data_in[27].d),

    // to internal hardware
    .qe     (data_in_27_flds_we[0]),
    .q      (reg2hw.data_in[27].q),
    .ds     (),

    // to register interface (read)
    .qs     (data_in_27_qs)
  );
  assign reg2hw.data_in[27].qe = data_in_27_qe;


  // Subregister 28 of Multireg data_in
  // R[data_in_28]: V(False)
  logic data_in_28_qe;
  logic [0:0] data_in_28_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_data_in28_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&data_in_28_flds_we),
    .q_o(data_in_28_qe)
  );
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_data_in_28 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (data_in_28_we),
    .wd     (data_in_28_wd),

    // from internal hardware
    .de     (hw2reg.data_in[28].de),
    .d      (hw2reg.data_in[28].d),

    // to internal hardware
    .qe     (data_in_28_flds_we[0]),
    .q      (reg2hw.data_in[28].q),
    .ds     (),

    // to register interface (read)
    .qs     (data_in_28_qs)
  );
  assign reg2hw.data_in[28].qe = data_in_28_qe;


  // Subregister 29 of Multireg data_in
  // R[data_in_29]: V(False)
  logic data_in_29_qe;
  logic [0:0] data_in_29_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_data_in29_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&data_in_29_flds_we),
    .q_o(data_in_29_qe)
  );
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_data_in_29 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (data_in_29_we),
    .wd     (data_in_29_wd),

    // from internal hardware
    .de     (hw2reg.data_in[29].de),
    .d      (hw2reg.data_in[29].d),

    // to internal hardware
    .qe     (data_in_29_flds_we[0]),
    .q      (reg2hw.data_in[29].q),
    .ds     (),

    // to register interface (read)
    .qs     (data_in_29_qs)
  );
  assign reg2hw.data_in[29].qe = data_in_29_qe;


  // Subregister 30 of Multireg data_in
  // R[data_in_30]: V(False)
  logic data_in_30_qe;
  logic [0:0] data_in_30_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_data_in30_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&data_in_30_flds_we),
    .q_o(data_in_30_qe)
  );
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_data_in_30 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (data_in_30_we),
    .wd     (data_in_30_wd),

    // from internal hardware
    .de     (hw2reg.data_in[30].de),
    .d      (hw2reg.data_in[30].d),

    // to internal hardware
    .qe     (data_in_30_flds_we[0]),
    .q      (reg2hw.data_in[30].q),
    .ds     (),

    // to register interface (read)
    .qs     (data_in_30_qs)
  );
  assign reg2hw.data_in[30].qe = data_in_30_qe;


  // Subregister 31 of Multireg data_in
  // R[data_in_31]: V(False)
  logic data_in_31_qe;
  logic [0:0] data_in_31_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_data_in31_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&data_in_31_flds_we),
    .q_o(data_in_31_qe)
  );
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_data_in_31 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (data_in_31_we),
    .wd     (data_in_31_wd),

    // from internal hardware
    .de     (hw2reg.data_in[31].de),
    .d      (hw2reg.data_in[31].d),

    // to internal hardware
    .qe     (data_in_31_flds_we[0]),
    .q      (reg2hw.data_in[31].q),
    .ds     (),

    // to register interface (read)
    .qs     (data_in_31_qs)
  );
  assign reg2hw.data_in[31].qe = data_in_31_qe;


  // Subregister 32 of Multireg data_in
  // R[data_in_32]: V(False)
  logic data_in_32_qe;
  logic [0:0] data_in_32_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_data_in32_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&data_in_32_flds_we),
    .q_o(data_in_32_qe)
  );
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_data_in_32 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (data_in_32_we),
    .wd     (data_in_32_wd),

    // from internal hardware
    .de     (hw2reg.data_in[32].de),
    .d      (hw2reg.data_in[32].d),

    // to internal hardware
    .qe     (data_in_32_flds_we[0]),
    .q      (reg2hw.data_in[32].q),
    .ds     (),

    // to register interface (read)
    .qs     (data_in_32_qs)
  );
  assign reg2hw.data_in[32].qe = data_in_32_qe;


  // Subregister 33 of Multireg data_in
  // R[data_in_33]: V(False)
  logic data_in_33_qe;
  logic [0:0] data_in_33_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_data_in33_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&data_in_33_flds_we),
    .q_o(data_in_33_qe)
  );
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_data_in_33 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (data_in_33_we),
    .wd     (data_in_33_wd),

    // from internal hardware
    .de     (hw2reg.data_in[33].de),
    .d      (hw2reg.data_in[33].d),

    // to internal hardware
    .qe     (data_in_33_flds_we[0]),
    .q      (reg2hw.data_in[33].q),
    .ds     (),

    // to register interface (read)
    .qs     (data_in_33_qs)
  );
  assign reg2hw.data_in[33].qe = data_in_33_qe;


  // Subregister 34 of Multireg data_in
  // R[data_in_34]: V(False)
  logic data_in_34_qe;
  logic [0:0] data_in_34_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_data_in34_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&data_in_34_flds_we),
    .q_o(data_in_34_qe)
  );
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_data_in_34 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (data_in_34_we),
    .wd     (data_in_34_wd),

    // from internal hardware
    .de     (hw2reg.data_in[34].de),
    .d      (hw2reg.data_in[34].d),

    // to internal hardware
    .qe     (data_in_34_flds_we[0]),
    .q      (reg2hw.data_in[34].q),
    .ds     (),

    // to register interface (read)
    .qs     (data_in_34_qs)
  );
  assign reg2hw.data_in[34].qe = data_in_34_qe;


  // Subregister 35 of Multireg data_in
  // R[data_in_35]: V(False)
  logic data_in_35_qe;
  logic [0:0] data_in_35_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_data_in35_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&data_in_35_flds_we),
    .q_o(data_in_35_qe)
  );
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_data_in_35 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (data_in_35_we),
    .wd     (data_in_35_wd),

    // from internal hardware
    .de     (hw2reg.data_in[35].de),
    .d      (hw2reg.data_in[35].d),

    // to internal hardware
    .qe     (data_in_35_flds_we[0]),
    .q      (reg2hw.data_in[35].q),
    .ds     (),

    // to register interface (read)
    .qs     (data_in_35_qs)
  );
  assign reg2hw.data_in[35].qe = data_in_35_qe;


  // Subregister 36 of Multireg data_in
  // R[data_in_36]: V(False)
  logic data_in_36_qe;
  logic [0:0] data_in_36_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_data_in36_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&data_in_36_flds_we),
    .q_o(data_in_36_qe)
  );
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_data_in_36 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (data_in_36_we),
    .wd     (data_in_36_wd),

    // from internal hardware
    .de     (hw2reg.data_in[36].de),
    .d      (hw2reg.data_in[36].d),

    // to internal hardware
    .qe     (data_in_36_flds_we[0]),
    .q      (reg2hw.data_in[36].q),
    .ds     (),

    // to register interface (read)
    .qs     (data_in_36_qs)
  );
  assign reg2hw.data_in[36].qe = data_in_36_qe;


  // Subregister 37 of Multireg data_in
  // R[data_in_37]: V(False)
  logic data_in_37_qe;
  logic [0:0] data_in_37_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_data_in37_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&data_in_37_flds_we),
    .q_o(data_in_37_qe)
  );
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_data_in_37 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (data_in_37_we),
    .wd     (data_in_37_wd),

    // from internal hardware
    .de     (hw2reg.data_in[37].de),
    .d      (hw2reg.data_in[37].d),

    // to internal hardware
    .qe     (data_in_37_flds_we[0]),
    .q      (reg2hw.data_in[37].q),
    .ds     (),

    // to register interface (read)
    .qs     (data_in_37_qs)
  );
  assign reg2hw.data_in[37].qe = data_in_37_qe;


  // Subregister 38 of Multireg data_in
  // R[data_in_38]: V(False)
  logic data_in_38_qe;
  logic [0:0] data_in_38_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_data_in38_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&data_in_38_flds_we),
    .q_o(data_in_38_qe)
  );
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_data_in_38 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (data_in_38_we),
    .wd     (data_in_38_wd),

    // from internal hardware
    .de     (hw2reg.data_in[38].de),
    .d      (hw2reg.data_in[38].d),

    // to internal hardware
    .qe     (data_in_38_flds_we[0]),
    .q      (reg2hw.data_in[38].q),
    .ds     (),

    // to register interface (read)
    .qs     (data_in_38_qs)
  );
  assign reg2hw.data_in[38].qe = data_in_38_qe;


  // Subregister 39 of Multireg data_in
  // R[data_in_39]: V(False)
  logic data_in_39_qe;
  logic [0:0] data_in_39_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_data_in39_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&data_in_39_flds_we),
    .q_o(data_in_39_qe)
  );
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_data_in_39 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (data_in_39_we),
    .wd     (data_in_39_wd),

    // from internal hardware
    .de     (hw2reg.data_in[39].de),
    .d      (hw2reg.data_in[39].d),

    // to internal hardware
    .qe     (data_in_39_flds_we[0]),
    .q      (reg2hw.data_in[39].q),
    .ds     (),

    // to register interface (read)
    .qs     (data_in_39_qs)
  );
  assign reg2hw.data_in[39].qe = data_in_39_qe;


  // Subregister 40 of Multireg data_in
  // R[data_in_40]: V(False)
  logic data_in_40_qe;
  logic [0:0] data_in_40_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_data_in40_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&data_in_40_flds_we),
    .q_o(data_in_40_qe)
  );
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_data_in_40 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (data_in_40_we),
    .wd     (data_in_40_wd),

    // from internal hardware
    .de     (hw2reg.data_in[40].de),
    .d      (hw2reg.data_in[40].d),

    // to internal hardware
    .qe     (data_in_40_flds_we[0]),
    .q      (reg2hw.data_in[40].q),
    .ds     (),

    // to register interface (read)
    .qs     (data_in_40_qs)
  );
  assign reg2hw.data_in[40].qe = data_in_40_qe;


  // Subregister 41 of Multireg data_in
  // R[data_in_41]: V(False)
  logic data_in_41_qe;
  logic [0:0] data_in_41_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_data_in41_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&data_in_41_flds_we),
    .q_o(data_in_41_qe)
  );
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_data_in_41 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (data_in_41_we),
    .wd     (data_in_41_wd),

    // from internal hardware
    .de     (hw2reg.data_in[41].de),
    .d      (hw2reg.data_in[41].d),

    // to internal hardware
    .qe     (data_in_41_flds_we[0]),
    .q      (reg2hw.data_in[41].q),
    .ds     (),

    // to register interface (read)
    .qs     (data_in_41_qs)
  );
  assign reg2hw.data_in[41].qe = data_in_41_qe;


  // Subregister 0 of Multireg encoded_data_out
  // R[encoded_data_out_0]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_encoded_data_out_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.encoded_data_out[0].de),
    .d      (hw2reg.encoded_data_out[0].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.encoded_data_out[0].q),
    .ds     (),

    // to register interface (read)
    .qs     (encoded_data_out_0_qs)
  );


  // Subregister 1 of Multireg encoded_data_out
  // R[encoded_data_out_1]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_encoded_data_out_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.encoded_data_out[1].de),
    .d      (hw2reg.encoded_data_out[1].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.encoded_data_out[1].q),
    .ds     (),

    // to register interface (read)
    .qs     (encoded_data_out_1_qs)
  );


  // Subregister 2 of Multireg encoded_data_out
  // R[encoded_data_out_2]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_encoded_data_out_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.encoded_data_out[2].de),
    .d      (hw2reg.encoded_data_out[2].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.encoded_data_out[2].q),
    .ds     (),

    // to register interface (read)
    .qs     (encoded_data_out_2_qs)
  );


  // Subregister 3 of Multireg encoded_data_out
  // R[encoded_data_out_3]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_encoded_data_out_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.encoded_data_out[3].de),
    .d      (hw2reg.encoded_data_out[3].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.encoded_data_out[3].q),
    .ds     (),

    // to register interface (read)
    .qs     (encoded_data_out_3_qs)
  );


  // Subregister 4 of Multireg encoded_data_out
  // R[encoded_data_out_4]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_encoded_data_out_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.encoded_data_out[4].de),
    .d      (hw2reg.encoded_data_out[4].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.encoded_data_out[4].q),
    .ds     (),

    // to register interface (read)
    .qs     (encoded_data_out_4_qs)
  );


  // Subregister 5 of Multireg encoded_data_out
  // R[encoded_data_out_5]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_encoded_data_out_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.encoded_data_out[5].de),
    .d      (hw2reg.encoded_data_out[5].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.encoded_data_out[5].q),
    .ds     (),

    // to register interface (read)
    .qs     (encoded_data_out_5_qs)
  );


  // Subregister 6 of Multireg encoded_data_out
  // R[encoded_data_out_6]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_encoded_data_out_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.encoded_data_out[6].de),
    .d      (hw2reg.encoded_data_out[6].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.encoded_data_out[6].q),
    .ds     (),

    // to register interface (read)
    .qs     (encoded_data_out_6_qs)
  );


  // Subregister 7 of Multireg encoded_data_out
  // R[encoded_data_out_7]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_encoded_data_out_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.encoded_data_out[7].de),
    .d      (hw2reg.encoded_data_out[7].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.encoded_data_out[7].q),
    .ds     (),

    // to register interface (read)
    .qs     (encoded_data_out_7_qs)
  );


  // Subregister 8 of Multireg encoded_data_out
  // R[encoded_data_out_8]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_encoded_data_out_8 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.encoded_data_out[8].de),
    .d      (hw2reg.encoded_data_out[8].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.encoded_data_out[8].q),
    .ds     (),

    // to register interface (read)
    .qs     (encoded_data_out_8_qs)
  );


  // Subregister 9 of Multireg encoded_data_out
  // R[encoded_data_out_9]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_encoded_data_out_9 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.encoded_data_out[9].de),
    .d      (hw2reg.encoded_data_out[9].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.encoded_data_out[9].q),
    .ds     (),

    // to register interface (read)
    .qs     (encoded_data_out_9_qs)
  );


  // Subregister 10 of Multireg encoded_data_out
  // R[encoded_data_out_10]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_encoded_data_out_10 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.encoded_data_out[10].de),
    .d      (hw2reg.encoded_data_out[10].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.encoded_data_out[10].q),
    .ds     (),

    // to register interface (read)
    .qs     (encoded_data_out_10_qs)
  );


  // Subregister 11 of Multireg encoded_data_out
  // R[encoded_data_out_11]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_encoded_data_out_11 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.encoded_data_out[11].de),
    .d      (hw2reg.encoded_data_out[11].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.encoded_data_out[11].q),
    .ds     (),

    // to register interface (read)
    .qs     (encoded_data_out_11_qs)
  );


  // Subregister 12 of Multireg encoded_data_out
  // R[encoded_data_out_12]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_encoded_data_out_12 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.encoded_data_out[12].de),
    .d      (hw2reg.encoded_data_out[12].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.encoded_data_out[12].q),
    .ds     (),

    // to register interface (read)
    .qs     (encoded_data_out_12_qs)
  );


  // Subregister 13 of Multireg encoded_data_out
  // R[encoded_data_out_13]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_encoded_data_out_13 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.encoded_data_out[13].de),
    .d      (hw2reg.encoded_data_out[13].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.encoded_data_out[13].q),
    .ds     (),

    // to register interface (read)
    .qs     (encoded_data_out_13_qs)
  );


  // Subregister 14 of Multireg encoded_data_out
  // R[encoded_data_out_14]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_encoded_data_out_14 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.encoded_data_out[14].de),
    .d      (hw2reg.encoded_data_out[14].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.encoded_data_out[14].q),
    .ds     (),

    // to register interface (read)
    .qs     (encoded_data_out_14_qs)
  );


  // Subregister 15 of Multireg encoded_data_out
  // R[encoded_data_out_15]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_encoded_data_out_15 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.encoded_data_out[15].de),
    .d      (hw2reg.encoded_data_out[15].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.encoded_data_out[15].q),
    .ds     (),

    // to register interface (read)
    .qs     (encoded_data_out_15_qs)
  );


  // Subregister 16 of Multireg encoded_data_out
  // R[encoded_data_out_16]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_encoded_data_out_16 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.encoded_data_out[16].de),
    .d      (hw2reg.encoded_data_out[16].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.encoded_data_out[16].q),
    .ds     (),

    // to register interface (read)
    .qs     (encoded_data_out_16_qs)
  );


  // Subregister 17 of Multireg encoded_data_out
  // R[encoded_data_out_17]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_encoded_data_out_17 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.encoded_data_out[17].de),
    .d      (hw2reg.encoded_data_out[17].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.encoded_data_out[17].q),
    .ds     (),

    // to register interface (read)
    .qs     (encoded_data_out_17_qs)
  );


  // Subregister 18 of Multireg encoded_data_out
  // R[encoded_data_out_18]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_encoded_data_out_18 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.encoded_data_out[18].de),
    .d      (hw2reg.encoded_data_out[18].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.encoded_data_out[18].q),
    .ds     (),

    // to register interface (read)
    .qs     (encoded_data_out_18_qs)
  );


  // Subregister 19 of Multireg encoded_data_out
  // R[encoded_data_out_19]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_encoded_data_out_19 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.encoded_data_out[19].de),
    .d      (hw2reg.encoded_data_out[19].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.encoded_data_out[19].q),
    .ds     (),

    // to register interface (read)
    .qs     (encoded_data_out_19_qs)
  );


  // Subregister 20 of Multireg encoded_data_out
  // R[encoded_data_out_20]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_encoded_data_out_20 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.encoded_data_out[20].de),
    .d      (hw2reg.encoded_data_out[20].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.encoded_data_out[20].q),
    .ds     (),

    // to register interface (read)
    .qs     (encoded_data_out_20_qs)
  );


  // Subregister 21 of Multireg encoded_data_out
  // R[encoded_data_out_21]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_encoded_data_out_21 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.encoded_data_out[21].de),
    .d      (hw2reg.encoded_data_out[21].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.encoded_data_out[21].q),
    .ds     (),

    // to register interface (read)
    .qs     (encoded_data_out_21_qs)
  );


  // Subregister 22 of Multireg encoded_data_out
  // R[encoded_data_out_22]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_encoded_data_out_22 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.encoded_data_out[22].de),
    .d      (hw2reg.encoded_data_out[22].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.encoded_data_out[22].q),
    .ds     (),

    // to register interface (read)
    .qs     (encoded_data_out_22_qs)
  );


  // Subregister 23 of Multireg encoded_data_out
  // R[encoded_data_out_23]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_encoded_data_out_23 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.encoded_data_out[23].de),
    .d      (hw2reg.encoded_data_out[23].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.encoded_data_out[23].q),
    .ds     (),

    // to register interface (read)
    .qs     (encoded_data_out_23_qs)
  );


  // Subregister 24 of Multireg encoded_data_out
  // R[encoded_data_out_24]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_encoded_data_out_24 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.encoded_data_out[24].de),
    .d      (hw2reg.encoded_data_out[24].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.encoded_data_out[24].q),
    .ds     (),

    // to register interface (read)
    .qs     (encoded_data_out_24_qs)
  );


  // Subregister 25 of Multireg encoded_data_out
  // R[encoded_data_out_25]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_encoded_data_out_25 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.encoded_data_out[25].de),
    .d      (hw2reg.encoded_data_out[25].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.encoded_data_out[25].q),
    .ds     (),

    // to register interface (read)
    .qs     (encoded_data_out_25_qs)
  );


  // Subregister 26 of Multireg encoded_data_out
  // R[encoded_data_out_26]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_encoded_data_out_26 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.encoded_data_out[26].de),
    .d      (hw2reg.encoded_data_out[26].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.encoded_data_out[26].q),
    .ds     (),

    // to register interface (read)
    .qs     (encoded_data_out_26_qs)
  );


  // Subregister 27 of Multireg encoded_data_out
  // R[encoded_data_out_27]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_encoded_data_out_27 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.encoded_data_out[27].de),
    .d      (hw2reg.encoded_data_out[27].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.encoded_data_out[27].q),
    .ds     (),

    // to register interface (read)
    .qs     (encoded_data_out_27_qs)
  );


  // Subregister 28 of Multireg encoded_data_out
  // R[encoded_data_out_28]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_encoded_data_out_28 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.encoded_data_out[28].de),
    .d      (hw2reg.encoded_data_out[28].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.encoded_data_out[28].q),
    .ds     (),

    // to register interface (read)
    .qs     (encoded_data_out_28_qs)
  );


  // Subregister 29 of Multireg encoded_data_out
  // R[encoded_data_out_29]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_encoded_data_out_29 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.encoded_data_out[29].de),
    .d      (hw2reg.encoded_data_out[29].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.encoded_data_out[29].q),
    .ds     (),

    // to register interface (read)
    .qs     (encoded_data_out_29_qs)
  );


  // Subregister 30 of Multireg encoded_data_out
  // R[encoded_data_out_30]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_encoded_data_out_30 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.encoded_data_out[30].de),
    .d      (hw2reg.encoded_data_out[30].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.encoded_data_out[30].q),
    .ds     (),

    // to register interface (read)
    .qs     (encoded_data_out_30_qs)
  );


  // Subregister 31 of Multireg encoded_data_out
  // R[encoded_data_out_31]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_encoded_data_out_31 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.encoded_data_out[31].de),
    .d      (hw2reg.encoded_data_out[31].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.encoded_data_out[31].q),
    .ds     (),

    // to register interface (read)
    .qs     (encoded_data_out_31_qs)
  );


  // Subregister 32 of Multireg encoded_data_out
  // R[encoded_data_out_32]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_encoded_data_out_32 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.encoded_data_out[32].de),
    .d      (hw2reg.encoded_data_out[32].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.encoded_data_out[32].q),
    .ds     (),

    // to register interface (read)
    .qs     (encoded_data_out_32_qs)
  );


  // Subregister 33 of Multireg encoded_data_out
  // R[encoded_data_out_33]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_encoded_data_out_33 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.encoded_data_out[33].de),
    .d      (hw2reg.encoded_data_out[33].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.encoded_data_out[33].q),
    .ds     (),

    // to register interface (read)
    .qs     (encoded_data_out_33_qs)
  );


  // Subregister 34 of Multireg encoded_data_out
  // R[encoded_data_out_34]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_encoded_data_out_34 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.encoded_data_out[34].de),
    .d      (hw2reg.encoded_data_out[34].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.encoded_data_out[34].q),
    .ds     (),

    // to register interface (read)
    .qs     (encoded_data_out_34_qs)
  );


  // Subregister 35 of Multireg encoded_data_out
  // R[encoded_data_out_35]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_encoded_data_out_35 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.encoded_data_out[35].de),
    .d      (hw2reg.encoded_data_out[35].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.encoded_data_out[35].q),
    .ds     (),

    // to register interface (read)
    .qs     (encoded_data_out_35_qs)
  );


  // Subregister 36 of Multireg encoded_data_out
  // R[encoded_data_out_36]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_encoded_data_out_36 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.encoded_data_out[36].de),
    .d      (hw2reg.encoded_data_out[36].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.encoded_data_out[36].q),
    .ds     (),

    // to register interface (read)
    .qs     (encoded_data_out_36_qs)
  );


  // Subregister 37 of Multireg encoded_data_out
  // R[encoded_data_out_37]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_encoded_data_out_37 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.encoded_data_out[37].de),
    .d      (hw2reg.encoded_data_out[37].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.encoded_data_out[37].q),
    .ds     (),

    // to register interface (read)
    .qs     (encoded_data_out_37_qs)
  );


  // Subregister 38 of Multireg encoded_data_out
  // R[encoded_data_out_38]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_encoded_data_out_38 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.encoded_data_out[38].de),
    .d      (hw2reg.encoded_data_out[38].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.encoded_data_out[38].q),
    .ds     (),

    // to register interface (read)
    .qs     (encoded_data_out_38_qs)
  );


  // Subregister 39 of Multireg encoded_data_out
  // R[encoded_data_out_39]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_encoded_data_out_39 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.encoded_data_out[39].de),
    .d      (hw2reg.encoded_data_out[39].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.encoded_data_out[39].q),
    .ds     (),

    // to register interface (read)
    .qs     (encoded_data_out_39_qs)
  );


  // Subregister 40 of Multireg encoded_data_out
  // R[encoded_data_out_40]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_encoded_data_out_40 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.encoded_data_out[40].de),
    .d      (hw2reg.encoded_data_out[40].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.encoded_data_out[40].q),
    .ds     (),

    // to register interface (read)
    .qs     (encoded_data_out_40_qs)
  );


  // Subregister 41 of Multireg encoded_data_out
  // R[encoded_data_out_41]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_encoded_data_out_41 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.encoded_data_out[41].de),
    .d      (hw2reg.encoded_data_out[41].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.encoded_data_out[41].q),
    .ds     (),

    // to register interface (read)
    .qs     (encoded_data_out_41_qs)
  );


  // Subregister 42 of Multireg encoded_data_out
  // R[encoded_data_out_42]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_encoded_data_out_42 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.encoded_data_out[42].de),
    .d      (hw2reg.encoded_data_out[42].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.encoded_data_out[42].q),
    .ds     (),

    // to register interface (read)
    .qs     (encoded_data_out_42_qs)
  );


  // Subregister 43 of Multireg encoded_data_out
  // R[encoded_data_out_43]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_encoded_data_out_43 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.encoded_data_out[43].de),
    .d      (hw2reg.encoded_data_out[43].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.encoded_data_out[43].q),
    .ds     (),

    // to register interface (read)
    .qs     (encoded_data_out_43_qs)
  );


  // Subregister 44 of Multireg encoded_data_out
  // R[encoded_data_out_44]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_encoded_data_out_44 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.encoded_data_out[44].de),
    .d      (hw2reg.encoded_data_out[44].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.encoded_data_out[44].q),
    .ds     (),

    // to register interface (read)
    .qs     (encoded_data_out_44_qs)
  );


  // Subregister 45 of Multireg encoded_data_out
  // R[encoded_data_out_45]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_encoded_data_out_45 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.encoded_data_out[45].de),
    .d      (hw2reg.encoded_data_out[45].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.encoded_data_out[45].q),
    .ds     (),

    // to register interface (read)
    .qs     (encoded_data_out_45_qs)
  );


  // Subregister 46 of Multireg encoded_data_out
  // R[encoded_data_out_46]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_encoded_data_out_46 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.encoded_data_out[46].de),
    .d      (hw2reg.encoded_data_out[46].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.encoded_data_out[46].q),
    .ds     (),

    // to register interface (read)
    .qs     (encoded_data_out_46_qs)
  );


  // Subregister 47 of Multireg encoded_data_out
  // R[encoded_data_out_47]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_encoded_data_out_47 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.encoded_data_out[47].de),
    .d      (hw2reg.encoded_data_out[47].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.encoded_data_out[47].q),
    .ds     (),

    // to register interface (read)
    .qs     (encoded_data_out_47_qs)
  );


  // Subregister 48 of Multireg encoded_data_out
  // R[encoded_data_out_48]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_encoded_data_out_48 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.encoded_data_out[48].de),
    .d      (hw2reg.encoded_data_out[48].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.encoded_data_out[48].q),
    .ds     (),

    // to register interface (read)
    .qs     (encoded_data_out_48_qs)
  );


  // Subregister 49 of Multireg encoded_data_out
  // R[encoded_data_out_49]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_encoded_data_out_49 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.encoded_data_out[49].de),
    .d      (hw2reg.encoded_data_out[49].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.encoded_data_out[49].q),
    .ds     (),

    // to register interface (read)
    .qs     (encoded_data_out_49_qs)
  );



  logic [93:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[ 0] = (reg_addr == RS_ENCODE_CTRL_SIGNALS_OFFSET);
    addr_hit[ 1] = (reg_addr == RS_ENCODE_STATE_SIGNALS_OFFSET);
    addr_hit[ 2] = (reg_addr == RS_ENCODE_DATA_IN_0_OFFSET);
    addr_hit[ 3] = (reg_addr == RS_ENCODE_DATA_IN_1_OFFSET);
    addr_hit[ 4] = (reg_addr == RS_ENCODE_DATA_IN_2_OFFSET);
    addr_hit[ 5] = (reg_addr == RS_ENCODE_DATA_IN_3_OFFSET);
    addr_hit[ 6] = (reg_addr == RS_ENCODE_DATA_IN_4_OFFSET);
    addr_hit[ 7] = (reg_addr == RS_ENCODE_DATA_IN_5_OFFSET);
    addr_hit[ 8] = (reg_addr == RS_ENCODE_DATA_IN_6_OFFSET);
    addr_hit[ 9] = (reg_addr == RS_ENCODE_DATA_IN_7_OFFSET);
    addr_hit[10] = (reg_addr == RS_ENCODE_DATA_IN_8_OFFSET);
    addr_hit[11] = (reg_addr == RS_ENCODE_DATA_IN_9_OFFSET);
    addr_hit[12] = (reg_addr == RS_ENCODE_DATA_IN_10_OFFSET);
    addr_hit[13] = (reg_addr == RS_ENCODE_DATA_IN_11_OFFSET);
    addr_hit[14] = (reg_addr == RS_ENCODE_DATA_IN_12_OFFSET);
    addr_hit[15] = (reg_addr == RS_ENCODE_DATA_IN_13_OFFSET);
    addr_hit[16] = (reg_addr == RS_ENCODE_DATA_IN_14_OFFSET);
    addr_hit[17] = (reg_addr == RS_ENCODE_DATA_IN_15_OFFSET);
    addr_hit[18] = (reg_addr == RS_ENCODE_DATA_IN_16_OFFSET);
    addr_hit[19] = (reg_addr == RS_ENCODE_DATA_IN_17_OFFSET);
    addr_hit[20] = (reg_addr == RS_ENCODE_DATA_IN_18_OFFSET);
    addr_hit[21] = (reg_addr == RS_ENCODE_DATA_IN_19_OFFSET);
    addr_hit[22] = (reg_addr == RS_ENCODE_DATA_IN_20_OFFSET);
    addr_hit[23] = (reg_addr == RS_ENCODE_DATA_IN_21_OFFSET);
    addr_hit[24] = (reg_addr == RS_ENCODE_DATA_IN_22_OFFSET);
    addr_hit[25] = (reg_addr == RS_ENCODE_DATA_IN_23_OFFSET);
    addr_hit[26] = (reg_addr == RS_ENCODE_DATA_IN_24_OFFSET);
    addr_hit[27] = (reg_addr == RS_ENCODE_DATA_IN_25_OFFSET);
    addr_hit[28] = (reg_addr == RS_ENCODE_DATA_IN_26_OFFSET);
    addr_hit[29] = (reg_addr == RS_ENCODE_DATA_IN_27_OFFSET);
    addr_hit[30] = (reg_addr == RS_ENCODE_DATA_IN_28_OFFSET);
    addr_hit[31] = (reg_addr == RS_ENCODE_DATA_IN_29_OFFSET);
    addr_hit[32] = (reg_addr == RS_ENCODE_DATA_IN_30_OFFSET);
    addr_hit[33] = (reg_addr == RS_ENCODE_DATA_IN_31_OFFSET);
    addr_hit[34] = (reg_addr == RS_ENCODE_DATA_IN_32_OFFSET);
    addr_hit[35] = (reg_addr == RS_ENCODE_DATA_IN_33_OFFSET);
    addr_hit[36] = (reg_addr == RS_ENCODE_DATA_IN_34_OFFSET);
    addr_hit[37] = (reg_addr == RS_ENCODE_DATA_IN_35_OFFSET);
    addr_hit[38] = (reg_addr == RS_ENCODE_DATA_IN_36_OFFSET);
    addr_hit[39] = (reg_addr == RS_ENCODE_DATA_IN_37_OFFSET);
    addr_hit[40] = (reg_addr == RS_ENCODE_DATA_IN_38_OFFSET);
    addr_hit[41] = (reg_addr == RS_ENCODE_DATA_IN_39_OFFSET);
    addr_hit[42] = (reg_addr == RS_ENCODE_DATA_IN_40_OFFSET);
    addr_hit[43] = (reg_addr == RS_ENCODE_DATA_IN_41_OFFSET);
    addr_hit[44] = (reg_addr == RS_ENCODE_ENCODED_DATA_OUT_0_OFFSET);
    addr_hit[45] = (reg_addr == RS_ENCODE_ENCODED_DATA_OUT_1_OFFSET);
    addr_hit[46] = (reg_addr == RS_ENCODE_ENCODED_DATA_OUT_2_OFFSET);
    addr_hit[47] = (reg_addr == RS_ENCODE_ENCODED_DATA_OUT_3_OFFSET);
    addr_hit[48] = (reg_addr == RS_ENCODE_ENCODED_DATA_OUT_4_OFFSET);
    addr_hit[49] = (reg_addr == RS_ENCODE_ENCODED_DATA_OUT_5_OFFSET);
    addr_hit[50] = (reg_addr == RS_ENCODE_ENCODED_DATA_OUT_6_OFFSET);
    addr_hit[51] = (reg_addr == RS_ENCODE_ENCODED_DATA_OUT_7_OFFSET);
    addr_hit[52] = (reg_addr == RS_ENCODE_ENCODED_DATA_OUT_8_OFFSET);
    addr_hit[53] = (reg_addr == RS_ENCODE_ENCODED_DATA_OUT_9_OFFSET);
    addr_hit[54] = (reg_addr == RS_ENCODE_ENCODED_DATA_OUT_10_OFFSET);
    addr_hit[55] = (reg_addr == RS_ENCODE_ENCODED_DATA_OUT_11_OFFSET);
    addr_hit[56] = (reg_addr == RS_ENCODE_ENCODED_DATA_OUT_12_OFFSET);
    addr_hit[57] = (reg_addr == RS_ENCODE_ENCODED_DATA_OUT_13_OFFSET);
    addr_hit[58] = (reg_addr == RS_ENCODE_ENCODED_DATA_OUT_14_OFFSET);
    addr_hit[59] = (reg_addr == RS_ENCODE_ENCODED_DATA_OUT_15_OFFSET);
    addr_hit[60] = (reg_addr == RS_ENCODE_ENCODED_DATA_OUT_16_OFFSET);
    addr_hit[61] = (reg_addr == RS_ENCODE_ENCODED_DATA_OUT_17_OFFSET);
    addr_hit[62] = (reg_addr == RS_ENCODE_ENCODED_DATA_OUT_18_OFFSET);
    addr_hit[63] = (reg_addr == RS_ENCODE_ENCODED_DATA_OUT_19_OFFSET);
    addr_hit[64] = (reg_addr == RS_ENCODE_ENCODED_DATA_OUT_20_OFFSET);
    addr_hit[65] = (reg_addr == RS_ENCODE_ENCODED_DATA_OUT_21_OFFSET);
    addr_hit[66] = (reg_addr == RS_ENCODE_ENCODED_DATA_OUT_22_OFFSET);
    addr_hit[67] = (reg_addr == RS_ENCODE_ENCODED_DATA_OUT_23_OFFSET);
    addr_hit[68] = (reg_addr == RS_ENCODE_ENCODED_DATA_OUT_24_OFFSET);
    addr_hit[69] = (reg_addr == RS_ENCODE_ENCODED_DATA_OUT_25_OFFSET);
    addr_hit[70] = (reg_addr == RS_ENCODE_ENCODED_DATA_OUT_26_OFFSET);
    addr_hit[71] = (reg_addr == RS_ENCODE_ENCODED_DATA_OUT_27_OFFSET);
    addr_hit[72] = (reg_addr == RS_ENCODE_ENCODED_DATA_OUT_28_OFFSET);
    addr_hit[73] = (reg_addr == RS_ENCODE_ENCODED_DATA_OUT_29_OFFSET);
    addr_hit[74] = (reg_addr == RS_ENCODE_ENCODED_DATA_OUT_30_OFFSET);
    addr_hit[75] = (reg_addr == RS_ENCODE_ENCODED_DATA_OUT_31_OFFSET);
    addr_hit[76] = (reg_addr == RS_ENCODE_ENCODED_DATA_OUT_32_OFFSET);
    addr_hit[77] = (reg_addr == RS_ENCODE_ENCODED_DATA_OUT_33_OFFSET);
    addr_hit[78] = (reg_addr == RS_ENCODE_ENCODED_DATA_OUT_34_OFFSET);
    addr_hit[79] = (reg_addr == RS_ENCODE_ENCODED_DATA_OUT_35_OFFSET);
    addr_hit[80] = (reg_addr == RS_ENCODE_ENCODED_DATA_OUT_36_OFFSET);
    addr_hit[81] = (reg_addr == RS_ENCODE_ENCODED_DATA_OUT_37_OFFSET);
    addr_hit[82] = (reg_addr == RS_ENCODE_ENCODED_DATA_OUT_38_OFFSET);
    addr_hit[83] = (reg_addr == RS_ENCODE_ENCODED_DATA_OUT_39_OFFSET);
    addr_hit[84] = (reg_addr == RS_ENCODE_ENCODED_DATA_OUT_40_OFFSET);
    addr_hit[85] = (reg_addr == RS_ENCODE_ENCODED_DATA_OUT_41_OFFSET);
    addr_hit[86] = (reg_addr == RS_ENCODE_ENCODED_DATA_OUT_42_OFFSET);
    addr_hit[87] = (reg_addr == RS_ENCODE_ENCODED_DATA_OUT_43_OFFSET);
    addr_hit[88] = (reg_addr == RS_ENCODE_ENCODED_DATA_OUT_44_OFFSET);
    addr_hit[89] = (reg_addr == RS_ENCODE_ENCODED_DATA_OUT_45_OFFSET);
    addr_hit[90] = (reg_addr == RS_ENCODE_ENCODED_DATA_OUT_46_OFFSET);
    addr_hit[91] = (reg_addr == RS_ENCODE_ENCODED_DATA_OUT_47_OFFSET);
    addr_hit[92] = (reg_addr == RS_ENCODE_ENCODED_DATA_OUT_48_OFFSET);
    addr_hit[93] = (reg_addr == RS_ENCODE_ENCODED_DATA_OUT_49_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[ 0] & (|(RS_ENCODE_PERMIT[ 0] & ~reg_be))) |
               (addr_hit[ 1] & (|(RS_ENCODE_PERMIT[ 1] & ~reg_be))) |
               (addr_hit[ 2] & (|(RS_ENCODE_PERMIT[ 2] & ~reg_be))) |
               (addr_hit[ 3] & (|(RS_ENCODE_PERMIT[ 3] & ~reg_be))) |
               (addr_hit[ 4] & (|(RS_ENCODE_PERMIT[ 4] & ~reg_be))) |
               (addr_hit[ 5] & (|(RS_ENCODE_PERMIT[ 5] & ~reg_be))) |
               (addr_hit[ 6] & (|(RS_ENCODE_PERMIT[ 6] & ~reg_be))) |
               (addr_hit[ 7] & (|(RS_ENCODE_PERMIT[ 7] & ~reg_be))) |
               (addr_hit[ 8] & (|(RS_ENCODE_PERMIT[ 8] & ~reg_be))) |
               (addr_hit[ 9] & (|(RS_ENCODE_PERMIT[ 9] & ~reg_be))) |
               (addr_hit[10] & (|(RS_ENCODE_PERMIT[10] & ~reg_be))) |
               (addr_hit[11] & (|(RS_ENCODE_PERMIT[11] & ~reg_be))) |
               (addr_hit[12] & (|(RS_ENCODE_PERMIT[12] & ~reg_be))) |
               (addr_hit[13] & (|(RS_ENCODE_PERMIT[13] & ~reg_be))) |
               (addr_hit[14] & (|(RS_ENCODE_PERMIT[14] & ~reg_be))) |
               (addr_hit[15] & (|(RS_ENCODE_PERMIT[15] & ~reg_be))) |
               (addr_hit[16] & (|(RS_ENCODE_PERMIT[16] & ~reg_be))) |
               (addr_hit[17] & (|(RS_ENCODE_PERMIT[17] & ~reg_be))) |
               (addr_hit[18] & (|(RS_ENCODE_PERMIT[18] & ~reg_be))) |
               (addr_hit[19] & (|(RS_ENCODE_PERMIT[19] & ~reg_be))) |
               (addr_hit[20] & (|(RS_ENCODE_PERMIT[20] & ~reg_be))) |
               (addr_hit[21] & (|(RS_ENCODE_PERMIT[21] & ~reg_be))) |
               (addr_hit[22] & (|(RS_ENCODE_PERMIT[22] & ~reg_be))) |
               (addr_hit[23] & (|(RS_ENCODE_PERMIT[23] & ~reg_be))) |
               (addr_hit[24] & (|(RS_ENCODE_PERMIT[24] & ~reg_be))) |
               (addr_hit[25] & (|(RS_ENCODE_PERMIT[25] & ~reg_be))) |
               (addr_hit[26] & (|(RS_ENCODE_PERMIT[26] & ~reg_be))) |
               (addr_hit[27] & (|(RS_ENCODE_PERMIT[27] & ~reg_be))) |
               (addr_hit[28] & (|(RS_ENCODE_PERMIT[28] & ~reg_be))) |
               (addr_hit[29] & (|(RS_ENCODE_PERMIT[29] & ~reg_be))) |
               (addr_hit[30] & (|(RS_ENCODE_PERMIT[30] & ~reg_be))) |
               (addr_hit[31] & (|(RS_ENCODE_PERMIT[31] & ~reg_be))) |
               (addr_hit[32] & (|(RS_ENCODE_PERMIT[32] & ~reg_be))) |
               (addr_hit[33] & (|(RS_ENCODE_PERMIT[33] & ~reg_be))) |
               (addr_hit[34] & (|(RS_ENCODE_PERMIT[34] & ~reg_be))) |
               (addr_hit[35] & (|(RS_ENCODE_PERMIT[35] & ~reg_be))) |
               (addr_hit[36] & (|(RS_ENCODE_PERMIT[36] & ~reg_be))) |
               (addr_hit[37] & (|(RS_ENCODE_PERMIT[37] & ~reg_be))) |
               (addr_hit[38] & (|(RS_ENCODE_PERMIT[38] & ~reg_be))) |
               (addr_hit[39] & (|(RS_ENCODE_PERMIT[39] & ~reg_be))) |
               (addr_hit[40] & (|(RS_ENCODE_PERMIT[40] & ~reg_be))) |
               (addr_hit[41] & (|(RS_ENCODE_PERMIT[41] & ~reg_be))) |
               (addr_hit[42] & (|(RS_ENCODE_PERMIT[42] & ~reg_be))) |
               (addr_hit[43] & (|(RS_ENCODE_PERMIT[43] & ~reg_be))) |
               (addr_hit[44] & (|(RS_ENCODE_PERMIT[44] & ~reg_be))) |
               (addr_hit[45] & (|(RS_ENCODE_PERMIT[45] & ~reg_be))) |
               (addr_hit[46] & (|(RS_ENCODE_PERMIT[46] & ~reg_be))) |
               (addr_hit[47] & (|(RS_ENCODE_PERMIT[47] & ~reg_be))) |
               (addr_hit[48] & (|(RS_ENCODE_PERMIT[48] & ~reg_be))) |
               (addr_hit[49] & (|(RS_ENCODE_PERMIT[49] & ~reg_be))) |
               (addr_hit[50] & (|(RS_ENCODE_PERMIT[50] & ~reg_be))) |
               (addr_hit[51] & (|(RS_ENCODE_PERMIT[51] & ~reg_be))) |
               (addr_hit[52] & (|(RS_ENCODE_PERMIT[52] & ~reg_be))) |
               (addr_hit[53] & (|(RS_ENCODE_PERMIT[53] & ~reg_be))) |
               (addr_hit[54] & (|(RS_ENCODE_PERMIT[54] & ~reg_be))) |
               (addr_hit[55] & (|(RS_ENCODE_PERMIT[55] & ~reg_be))) |
               (addr_hit[56] & (|(RS_ENCODE_PERMIT[56] & ~reg_be))) |
               (addr_hit[57] & (|(RS_ENCODE_PERMIT[57] & ~reg_be))) |
               (addr_hit[58] & (|(RS_ENCODE_PERMIT[58] & ~reg_be))) |
               (addr_hit[59] & (|(RS_ENCODE_PERMIT[59] & ~reg_be))) |
               (addr_hit[60] & (|(RS_ENCODE_PERMIT[60] & ~reg_be))) |
               (addr_hit[61] & (|(RS_ENCODE_PERMIT[61] & ~reg_be))) |
               (addr_hit[62] & (|(RS_ENCODE_PERMIT[62] & ~reg_be))) |
               (addr_hit[63] & (|(RS_ENCODE_PERMIT[63] & ~reg_be))) |
               (addr_hit[64] & (|(RS_ENCODE_PERMIT[64] & ~reg_be))) |
               (addr_hit[65] & (|(RS_ENCODE_PERMIT[65] & ~reg_be))) |
               (addr_hit[66] & (|(RS_ENCODE_PERMIT[66] & ~reg_be))) |
               (addr_hit[67] & (|(RS_ENCODE_PERMIT[67] & ~reg_be))) |
               (addr_hit[68] & (|(RS_ENCODE_PERMIT[68] & ~reg_be))) |
               (addr_hit[69] & (|(RS_ENCODE_PERMIT[69] & ~reg_be))) |
               (addr_hit[70] & (|(RS_ENCODE_PERMIT[70] & ~reg_be))) |
               (addr_hit[71] & (|(RS_ENCODE_PERMIT[71] & ~reg_be))) |
               (addr_hit[72] & (|(RS_ENCODE_PERMIT[72] & ~reg_be))) |
               (addr_hit[73] & (|(RS_ENCODE_PERMIT[73] & ~reg_be))) |
               (addr_hit[74] & (|(RS_ENCODE_PERMIT[74] & ~reg_be))) |
               (addr_hit[75] & (|(RS_ENCODE_PERMIT[75] & ~reg_be))) |
               (addr_hit[76] & (|(RS_ENCODE_PERMIT[76] & ~reg_be))) |
               (addr_hit[77] & (|(RS_ENCODE_PERMIT[77] & ~reg_be))) |
               (addr_hit[78] & (|(RS_ENCODE_PERMIT[78] & ~reg_be))) |
               (addr_hit[79] & (|(RS_ENCODE_PERMIT[79] & ~reg_be))) |
               (addr_hit[80] & (|(RS_ENCODE_PERMIT[80] & ~reg_be))) |
               (addr_hit[81] & (|(RS_ENCODE_PERMIT[81] & ~reg_be))) |
               (addr_hit[82] & (|(RS_ENCODE_PERMIT[82] & ~reg_be))) |
               (addr_hit[83] & (|(RS_ENCODE_PERMIT[83] & ~reg_be))) |
               (addr_hit[84] & (|(RS_ENCODE_PERMIT[84] & ~reg_be))) |
               (addr_hit[85] & (|(RS_ENCODE_PERMIT[85] & ~reg_be))) |
               (addr_hit[86] & (|(RS_ENCODE_PERMIT[86] & ~reg_be))) |
               (addr_hit[87] & (|(RS_ENCODE_PERMIT[87] & ~reg_be))) |
               (addr_hit[88] & (|(RS_ENCODE_PERMIT[88] & ~reg_be))) |
               (addr_hit[89] & (|(RS_ENCODE_PERMIT[89] & ~reg_be))) |
               (addr_hit[90] & (|(RS_ENCODE_PERMIT[90] & ~reg_be))) |
               (addr_hit[91] & (|(RS_ENCODE_PERMIT[91] & ~reg_be))) |
               (addr_hit[92] & (|(RS_ENCODE_PERMIT[92] & ~reg_be))) |
               (addr_hit[93] & (|(RS_ENCODE_PERMIT[93] & ~reg_be)))));
  end

  // Generate write-enables
  assign ctrl_signals_we = addr_hit[0] & reg_we & !reg_error;

  assign ctrl_signals_encode_en_wd = reg_wdata[0];

  assign ctrl_signals_clrn_wd = reg_wdata[1];
  assign data_in_0_we = addr_hit[2] & reg_we & !reg_error;

  assign data_in_0_wd = reg_wdata[31:0];
  assign data_in_1_we = addr_hit[3] & reg_we & !reg_error;

  assign data_in_1_wd = reg_wdata[31:0];
  assign data_in_2_we = addr_hit[4] & reg_we & !reg_error;

  assign data_in_2_wd = reg_wdata[31:0];
  assign data_in_3_we = addr_hit[5] & reg_we & !reg_error;

  assign data_in_3_wd = reg_wdata[31:0];
  assign data_in_4_we = addr_hit[6] & reg_we & !reg_error;

  assign data_in_4_wd = reg_wdata[31:0];
  assign data_in_5_we = addr_hit[7] & reg_we & !reg_error;

  assign data_in_5_wd = reg_wdata[31:0];
  assign data_in_6_we = addr_hit[8] & reg_we & !reg_error;

  assign data_in_6_wd = reg_wdata[31:0];
  assign data_in_7_we = addr_hit[9] & reg_we & !reg_error;

  assign data_in_7_wd = reg_wdata[31:0];
  assign data_in_8_we = addr_hit[10] & reg_we & !reg_error;

  assign data_in_8_wd = reg_wdata[31:0];
  assign data_in_9_we = addr_hit[11] & reg_we & !reg_error;

  assign data_in_9_wd = reg_wdata[31:0];
  assign data_in_10_we = addr_hit[12] & reg_we & !reg_error;

  assign data_in_10_wd = reg_wdata[31:0];
  assign data_in_11_we = addr_hit[13] & reg_we & !reg_error;

  assign data_in_11_wd = reg_wdata[31:0];
  assign data_in_12_we = addr_hit[14] & reg_we & !reg_error;

  assign data_in_12_wd = reg_wdata[31:0];
  assign data_in_13_we = addr_hit[15] & reg_we & !reg_error;

  assign data_in_13_wd = reg_wdata[31:0];
  assign data_in_14_we = addr_hit[16] & reg_we & !reg_error;

  assign data_in_14_wd = reg_wdata[31:0];
  assign data_in_15_we = addr_hit[17] & reg_we & !reg_error;

  assign data_in_15_wd = reg_wdata[31:0];
  assign data_in_16_we = addr_hit[18] & reg_we & !reg_error;

  assign data_in_16_wd = reg_wdata[31:0];
  assign data_in_17_we = addr_hit[19] & reg_we & !reg_error;

  assign data_in_17_wd = reg_wdata[31:0];
  assign data_in_18_we = addr_hit[20] & reg_we & !reg_error;

  assign data_in_18_wd = reg_wdata[31:0];
  assign data_in_19_we = addr_hit[21] & reg_we & !reg_error;

  assign data_in_19_wd = reg_wdata[31:0];
  assign data_in_20_we = addr_hit[22] & reg_we & !reg_error;

  assign data_in_20_wd = reg_wdata[31:0];
  assign data_in_21_we = addr_hit[23] & reg_we & !reg_error;

  assign data_in_21_wd = reg_wdata[31:0];
  assign data_in_22_we = addr_hit[24] & reg_we & !reg_error;

  assign data_in_22_wd = reg_wdata[31:0];
  assign data_in_23_we = addr_hit[25] & reg_we & !reg_error;

  assign data_in_23_wd = reg_wdata[31:0];
  assign data_in_24_we = addr_hit[26] & reg_we & !reg_error;

  assign data_in_24_wd = reg_wdata[31:0];
  assign data_in_25_we = addr_hit[27] & reg_we & !reg_error;

  assign data_in_25_wd = reg_wdata[31:0];
  assign data_in_26_we = addr_hit[28] & reg_we & !reg_error;

  assign data_in_26_wd = reg_wdata[31:0];
  assign data_in_27_we = addr_hit[29] & reg_we & !reg_error;

  assign data_in_27_wd = reg_wdata[31:0];
  assign data_in_28_we = addr_hit[30] & reg_we & !reg_error;

  assign data_in_28_wd = reg_wdata[31:0];
  assign data_in_29_we = addr_hit[31] & reg_we & !reg_error;

  assign data_in_29_wd = reg_wdata[31:0];
  assign data_in_30_we = addr_hit[32] & reg_we & !reg_error;

  assign data_in_30_wd = reg_wdata[31:0];
  assign data_in_31_we = addr_hit[33] & reg_we & !reg_error;

  assign data_in_31_wd = reg_wdata[31:0];
  assign data_in_32_we = addr_hit[34] & reg_we & !reg_error;

  assign data_in_32_wd = reg_wdata[31:0];
  assign data_in_33_we = addr_hit[35] & reg_we & !reg_error;

  assign data_in_33_wd = reg_wdata[31:0];
  assign data_in_34_we = addr_hit[36] & reg_we & !reg_error;

  assign data_in_34_wd = reg_wdata[31:0];
  assign data_in_35_we = addr_hit[37] & reg_we & !reg_error;

  assign data_in_35_wd = reg_wdata[31:0];
  assign data_in_36_we = addr_hit[38] & reg_we & !reg_error;

  assign data_in_36_wd = reg_wdata[31:0];
  assign data_in_37_we = addr_hit[39] & reg_we & !reg_error;

  assign data_in_37_wd = reg_wdata[31:0];
  assign data_in_38_we = addr_hit[40] & reg_we & !reg_error;

  assign data_in_38_wd = reg_wdata[31:0];
  assign data_in_39_we = addr_hit[41] & reg_we & !reg_error;

  assign data_in_39_wd = reg_wdata[31:0];
  assign data_in_40_we = addr_hit[42] & reg_we & !reg_error;

  assign data_in_40_wd = reg_wdata[31:0];
  assign data_in_41_we = addr_hit[43] & reg_we & !reg_error;

  assign data_in_41_wd = reg_wdata[31:0];

  // Assign write-enables to checker logic vector.
  always_comb begin
    reg_we_check = '0;
    reg_we_check[0] = ctrl_signals_we;
    reg_we_check[1] = 1'b0;
    reg_we_check[2] = data_in_0_we;
    reg_we_check[3] = data_in_1_we;
    reg_we_check[4] = data_in_2_we;
    reg_we_check[5] = data_in_3_we;
    reg_we_check[6] = data_in_4_we;
    reg_we_check[7] = data_in_5_we;
    reg_we_check[8] = data_in_6_we;
    reg_we_check[9] = data_in_7_we;
    reg_we_check[10] = data_in_8_we;
    reg_we_check[11] = data_in_9_we;
    reg_we_check[12] = data_in_10_we;
    reg_we_check[13] = data_in_11_we;
    reg_we_check[14] = data_in_12_we;
    reg_we_check[15] = data_in_13_we;
    reg_we_check[16] = data_in_14_we;
    reg_we_check[17] = data_in_15_we;
    reg_we_check[18] = data_in_16_we;
    reg_we_check[19] = data_in_17_we;
    reg_we_check[20] = data_in_18_we;
    reg_we_check[21] = data_in_19_we;
    reg_we_check[22] = data_in_20_we;
    reg_we_check[23] = data_in_21_we;
    reg_we_check[24] = data_in_22_we;
    reg_we_check[25] = data_in_23_we;
    reg_we_check[26] = data_in_24_we;
    reg_we_check[27] = data_in_25_we;
    reg_we_check[28] = data_in_26_we;
    reg_we_check[29] = data_in_27_we;
    reg_we_check[30] = data_in_28_we;
    reg_we_check[31] = data_in_29_we;
    reg_we_check[32] = data_in_30_we;
    reg_we_check[33] = data_in_31_we;
    reg_we_check[34] = data_in_32_we;
    reg_we_check[35] = data_in_33_we;
    reg_we_check[36] = data_in_34_we;
    reg_we_check[37] = data_in_35_we;
    reg_we_check[38] = data_in_36_we;
    reg_we_check[39] = data_in_37_we;
    reg_we_check[40] = data_in_38_we;
    reg_we_check[41] = data_in_39_we;
    reg_we_check[42] = data_in_40_we;
    reg_we_check[43] = data_in_41_we;
    reg_we_check[44] = 1'b0;
    reg_we_check[45] = 1'b0;
    reg_we_check[46] = 1'b0;
    reg_we_check[47] = 1'b0;
    reg_we_check[48] = 1'b0;
    reg_we_check[49] = 1'b0;
    reg_we_check[50] = 1'b0;
    reg_we_check[51] = 1'b0;
    reg_we_check[52] = 1'b0;
    reg_we_check[53] = 1'b0;
    reg_we_check[54] = 1'b0;
    reg_we_check[55] = 1'b0;
    reg_we_check[56] = 1'b0;
    reg_we_check[57] = 1'b0;
    reg_we_check[58] = 1'b0;
    reg_we_check[59] = 1'b0;
    reg_we_check[60] = 1'b0;
    reg_we_check[61] = 1'b0;
    reg_we_check[62] = 1'b0;
    reg_we_check[63] = 1'b0;
    reg_we_check[64] = 1'b0;
    reg_we_check[65] = 1'b0;
    reg_we_check[66] = 1'b0;
    reg_we_check[67] = 1'b0;
    reg_we_check[68] = 1'b0;
    reg_we_check[69] = 1'b0;
    reg_we_check[70] = 1'b0;
    reg_we_check[71] = 1'b0;
    reg_we_check[72] = 1'b0;
    reg_we_check[73] = 1'b0;
    reg_we_check[74] = 1'b0;
    reg_we_check[75] = 1'b0;
    reg_we_check[76] = 1'b0;
    reg_we_check[77] = 1'b0;
    reg_we_check[78] = 1'b0;
    reg_we_check[79] = 1'b0;
    reg_we_check[80] = 1'b0;
    reg_we_check[81] = 1'b0;
    reg_we_check[82] = 1'b0;
    reg_we_check[83] = 1'b0;
    reg_we_check[84] = 1'b0;
    reg_we_check[85] = 1'b0;
    reg_we_check[86] = 1'b0;
    reg_we_check[87] = 1'b0;
    reg_we_check[88] = 1'b0;
    reg_we_check[89] = 1'b0;
    reg_we_check[90] = 1'b0;
    reg_we_check[91] = 1'b0;
    reg_we_check[92] = 1'b0;
    reg_we_check[93] = 1'b0;
  end

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[0] = ctrl_signals_encode_en_qs;
        reg_rdata_next[1] = ctrl_signals_clrn_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[0] = state_signals_valid_bit_qs;
        reg_rdata_next[1] = state_signals_ready_bit_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[31:0] = data_in_0_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[31:0] = data_in_1_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[31:0] = data_in_2_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[31:0] = data_in_3_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[31:0] = data_in_4_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[31:0] = data_in_5_qs;
      end

      addr_hit[8]: begin
        reg_rdata_next[31:0] = data_in_6_qs;
      end

      addr_hit[9]: begin
        reg_rdata_next[31:0] = data_in_7_qs;
      end

      addr_hit[10]: begin
        reg_rdata_next[31:0] = data_in_8_qs;
      end

      addr_hit[11]: begin
        reg_rdata_next[31:0] = data_in_9_qs;
      end

      addr_hit[12]: begin
        reg_rdata_next[31:0] = data_in_10_qs;
      end

      addr_hit[13]: begin
        reg_rdata_next[31:0] = data_in_11_qs;
      end

      addr_hit[14]: begin
        reg_rdata_next[31:0] = data_in_12_qs;
      end

      addr_hit[15]: begin
        reg_rdata_next[31:0] = data_in_13_qs;
      end

      addr_hit[16]: begin
        reg_rdata_next[31:0] = data_in_14_qs;
      end

      addr_hit[17]: begin
        reg_rdata_next[31:0] = data_in_15_qs;
      end

      addr_hit[18]: begin
        reg_rdata_next[31:0] = data_in_16_qs;
      end

      addr_hit[19]: begin
        reg_rdata_next[31:0] = data_in_17_qs;
      end

      addr_hit[20]: begin
        reg_rdata_next[31:0] = data_in_18_qs;
      end

      addr_hit[21]: begin
        reg_rdata_next[31:0] = data_in_19_qs;
      end

      addr_hit[22]: begin
        reg_rdata_next[31:0] = data_in_20_qs;
      end

      addr_hit[23]: begin
        reg_rdata_next[31:0] = data_in_21_qs;
      end

      addr_hit[24]: begin
        reg_rdata_next[31:0] = data_in_22_qs;
      end

      addr_hit[25]: begin
        reg_rdata_next[31:0] = data_in_23_qs;
      end

      addr_hit[26]: begin
        reg_rdata_next[31:0] = data_in_24_qs;
      end

      addr_hit[27]: begin
        reg_rdata_next[31:0] = data_in_25_qs;
      end

      addr_hit[28]: begin
        reg_rdata_next[31:0] = data_in_26_qs;
      end

      addr_hit[29]: begin
        reg_rdata_next[31:0] = data_in_27_qs;
      end

      addr_hit[30]: begin
        reg_rdata_next[31:0] = data_in_28_qs;
      end

      addr_hit[31]: begin
        reg_rdata_next[31:0] = data_in_29_qs;
      end

      addr_hit[32]: begin
        reg_rdata_next[31:0] = data_in_30_qs;
      end

      addr_hit[33]: begin
        reg_rdata_next[31:0] = data_in_31_qs;
      end

      addr_hit[34]: begin
        reg_rdata_next[31:0] = data_in_32_qs;
      end

      addr_hit[35]: begin
        reg_rdata_next[31:0] = data_in_33_qs;
      end

      addr_hit[36]: begin
        reg_rdata_next[31:0] = data_in_34_qs;
      end

      addr_hit[37]: begin
        reg_rdata_next[31:0] = data_in_35_qs;
      end

      addr_hit[38]: begin
        reg_rdata_next[31:0] = data_in_36_qs;
      end

      addr_hit[39]: begin
        reg_rdata_next[31:0] = data_in_37_qs;
      end

      addr_hit[40]: begin
        reg_rdata_next[31:0] = data_in_38_qs;
      end

      addr_hit[41]: begin
        reg_rdata_next[31:0] = data_in_39_qs;
      end

      addr_hit[42]: begin
        reg_rdata_next[31:0] = data_in_40_qs;
      end

      addr_hit[43]: begin
        reg_rdata_next[31:0] = data_in_41_qs;
      end

      addr_hit[44]: begin
        reg_rdata_next[31:0] = encoded_data_out_0_qs;
      end

      addr_hit[45]: begin
        reg_rdata_next[31:0] = encoded_data_out_1_qs;
      end

      addr_hit[46]: begin
        reg_rdata_next[31:0] = encoded_data_out_2_qs;
      end

      addr_hit[47]: begin
        reg_rdata_next[31:0] = encoded_data_out_3_qs;
      end

      addr_hit[48]: begin
        reg_rdata_next[31:0] = encoded_data_out_4_qs;
      end

      addr_hit[49]: begin
        reg_rdata_next[31:0] = encoded_data_out_5_qs;
      end

      addr_hit[50]: begin
        reg_rdata_next[31:0] = encoded_data_out_6_qs;
      end

      addr_hit[51]: begin
        reg_rdata_next[31:0] = encoded_data_out_7_qs;
      end

      addr_hit[52]: begin
        reg_rdata_next[31:0] = encoded_data_out_8_qs;
      end

      addr_hit[53]: begin
        reg_rdata_next[31:0] = encoded_data_out_9_qs;
      end

      addr_hit[54]: begin
        reg_rdata_next[31:0] = encoded_data_out_10_qs;
      end

      addr_hit[55]: begin
        reg_rdata_next[31:0] = encoded_data_out_11_qs;
      end

      addr_hit[56]: begin
        reg_rdata_next[31:0] = encoded_data_out_12_qs;
      end

      addr_hit[57]: begin
        reg_rdata_next[31:0] = encoded_data_out_13_qs;
      end

      addr_hit[58]: begin
        reg_rdata_next[31:0] = encoded_data_out_14_qs;
      end

      addr_hit[59]: begin
        reg_rdata_next[31:0] = encoded_data_out_15_qs;
      end

      addr_hit[60]: begin
        reg_rdata_next[31:0] = encoded_data_out_16_qs;
      end

      addr_hit[61]: begin
        reg_rdata_next[31:0] = encoded_data_out_17_qs;
      end

      addr_hit[62]: begin
        reg_rdata_next[31:0] = encoded_data_out_18_qs;
      end

      addr_hit[63]: begin
        reg_rdata_next[31:0] = encoded_data_out_19_qs;
      end

      addr_hit[64]: begin
        reg_rdata_next[31:0] = encoded_data_out_20_qs;
      end

      addr_hit[65]: begin
        reg_rdata_next[31:0] = encoded_data_out_21_qs;
      end

      addr_hit[66]: begin
        reg_rdata_next[31:0] = encoded_data_out_22_qs;
      end

      addr_hit[67]: begin
        reg_rdata_next[31:0] = encoded_data_out_23_qs;
      end

      addr_hit[68]: begin
        reg_rdata_next[31:0] = encoded_data_out_24_qs;
      end

      addr_hit[69]: begin
        reg_rdata_next[31:0] = encoded_data_out_25_qs;
      end

      addr_hit[70]: begin
        reg_rdata_next[31:0] = encoded_data_out_26_qs;
      end

      addr_hit[71]: begin
        reg_rdata_next[31:0] = encoded_data_out_27_qs;
      end

      addr_hit[72]: begin
        reg_rdata_next[31:0] = encoded_data_out_28_qs;
      end

      addr_hit[73]: begin
        reg_rdata_next[31:0] = encoded_data_out_29_qs;
      end

      addr_hit[74]: begin
        reg_rdata_next[31:0] = encoded_data_out_30_qs;
      end

      addr_hit[75]: begin
        reg_rdata_next[31:0] = encoded_data_out_31_qs;
      end

      addr_hit[76]: begin
        reg_rdata_next[31:0] = encoded_data_out_32_qs;
      end

      addr_hit[77]: begin
        reg_rdata_next[31:0] = encoded_data_out_33_qs;
      end

      addr_hit[78]: begin
        reg_rdata_next[31:0] = encoded_data_out_34_qs;
      end

      addr_hit[79]: begin
        reg_rdata_next[31:0] = encoded_data_out_35_qs;
      end

      addr_hit[80]: begin
        reg_rdata_next[31:0] = encoded_data_out_36_qs;
      end

      addr_hit[81]: begin
        reg_rdata_next[31:0] = encoded_data_out_37_qs;
      end

      addr_hit[82]: begin
        reg_rdata_next[31:0] = encoded_data_out_38_qs;
      end

      addr_hit[83]: begin
        reg_rdata_next[31:0] = encoded_data_out_39_qs;
      end

      addr_hit[84]: begin
        reg_rdata_next[31:0] = encoded_data_out_40_qs;
      end

      addr_hit[85]: begin
        reg_rdata_next[31:0] = encoded_data_out_41_qs;
      end

      addr_hit[86]: begin
        reg_rdata_next[31:0] = encoded_data_out_42_qs;
      end

      addr_hit[87]: begin
        reg_rdata_next[31:0] = encoded_data_out_43_qs;
      end

      addr_hit[88]: begin
        reg_rdata_next[31:0] = encoded_data_out_44_qs;
      end

      addr_hit[89]: begin
        reg_rdata_next[31:0] = encoded_data_out_45_qs;
      end

      addr_hit[90]: begin
        reg_rdata_next[31:0] = encoded_data_out_46_qs;
      end

      addr_hit[91]: begin
        reg_rdata_next[31:0] = encoded_data_out_47_qs;
      end

      addr_hit[92]: begin
        reg_rdata_next[31:0] = encoded_data_out_48_qs;
      end

      addr_hit[93]: begin
        reg_rdata_next[31:0] = encoded_data_out_49_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // shadow busy
  logic shadow_busy;
  assign shadow_busy = 1'b0;

  // register busy
  assign reg_busy = shadow_busy;

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT_PULSE(wePulse, reg_we, clk_i, !rst_ni)
  `ASSERT_PULSE(rePulse, reg_re, clk_i, !rst_ni)

  `ASSERT(reAfterRv, $rose(reg_re || reg_we) |=> tl_o_pre.d_valid, clk_i, !rst_ni)

  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit), clk_i, !rst_ni)

  // this is formulated as an assumption such that the FPV testbenches do disprove this
  // property by mistake
  //`ASSUME(reqParity, tl_reg_h2d.a_valid |-> tl_reg_h2d.a_user.chk_en == tlul_pkg::CheckDis)

endmodule
