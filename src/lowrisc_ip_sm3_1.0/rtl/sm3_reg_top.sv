// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`

`include "prim_assert.sv"

module sm3_reg_top (
  input clk_i,
  input rst_ni,
  input  tlul_pkg::tl_h2d_t tl_i,
  output tlul_pkg::tl_d2h_t tl_o,
  // To HW
  output sm3_reg_pkg::sm3_reg2hw_t reg2hw, // Write
  input  sm3_reg_pkg::sm3_hw2reg_t hw2reg, // Read

  // Integrity check errors
  output logic intg_err_o,

  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import sm3_reg_pkg::* ;

  localparam int AW = 6;
  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;
  logic reg_busy;

  tlul_pkg::tl_h2d_t tl_reg_h2d;
  tlul_pkg::tl_d2h_t tl_reg_d2h;


  // incoming payload check
  logic intg_err;
  tlul_cmd_intg_chk u_chk (
    .tl_i(tl_i),
    .err_o(intg_err)
  );

  // also check for spurious write enables
  logic reg_we_err;
  logic [10:0] reg_we_check;
  prim_reg_we_check #(
    .OneHotWidth(11)
  ) u_prim_reg_we_check (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .oh_i  (reg_we_check),
    .en_i  (reg_we && !addrmiss),
    .err_o (reg_we_err)
  );

  logic err_q;
  always_ff @(posedge clk_i or negedge rst_ni) begin
    if (!rst_ni) begin
      err_q <= '0;
    end else if (intg_err || reg_we_err) begin
      err_q <= 1'b1;
    end
  end

  // integrity error output is permanent and should be used for alert generation
  // register errors are transactional
  assign intg_err_o = err_q | intg_err | reg_we_err;

  // outgoing integrity generation
  tlul_pkg::tl_d2h_t tl_o_pre;
  tlul_rsp_intg_gen #(
    .EnableRspIntgGen(1),
    .EnableDataIntgGen(1)
  ) u_rsp_intg_gen (
    .tl_i(tl_o_pre),
    .tl_o(tl_o)
  );

  assign tl_reg_h2d = tl_i;
  assign tl_o_pre   = tl_reg_d2h;

  tlul_adapter_reg #(
    .RegAw(AW),
    .RegDw(DW),
    .EnableDataIntgGen(0)
  ) u_reg_if (
    .clk_i  (clk_i),
    .rst_ni (rst_ni),

    .tl_i (tl_reg_h2d),
    .tl_o (tl_reg_d2h),

    .en_ifetch_i(prim_mubi_pkg::MuBi4False),
    .intg_error_o(),

    .we_o    (reg_we),
    .re_o    (reg_re),
    .addr_o  (reg_addr),
    .wdata_o (reg_wdata),
    .be_o    (reg_be),
    .busy_i  (reg_busy),
    .rdata_i (reg_rdata),
    .error_i (reg_error)
  );

  // cdc oversampling signals

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err | intg_err;

  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic ctrl_signals_we;
  logic ctrl_signals_msg_inpt_lst_qs;
  logic ctrl_signals_msg_inpt_lst_wd;
  logic ctrl_signals_msg_inpt_vld_byte_0_qs;
  logic ctrl_signals_msg_inpt_vld_byte_0_wd;
  logic ctrl_signals_msg_inpt_vld_byte_1_qs;
  logic ctrl_signals_msg_inpt_vld_byte_1_wd;
  logic ctrl_signals_msg_inpt_vld_byte_2_qs;
  logic ctrl_signals_msg_inpt_vld_byte_2_wd;
  logic ctrl_signals_msg_inpt_vld_byte_3_qs;
  logic ctrl_signals_msg_inpt_vld_byte_3_wd;
  logic state_signals_cmprss_otpt_vld_qs;
  logic state_signals_msg_inpt_rdy_qs;
  logic message_in_we;
  logic [31:0] message_in_qs;
  logic [31:0] message_in_wd;
  logic [31:0] result_out_0_qs;
  logic [31:0] result_out_1_qs;
  logic [31:0] result_out_2_qs;
  logic [31:0] result_out_3_qs;
  logic [31:0] result_out_4_qs;
  logic [31:0] result_out_5_qs;
  logic [31:0] result_out_6_qs;
  logic [31:0] result_out_7_qs;

  // Register instances
  // R[ctrl_signals]: V(False)
  logic ctrl_signals_qe;
  logic [4:0] ctrl_signals_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_ctrl_signals0_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&ctrl_signals_flds_we),
    .q_o(ctrl_signals_qe)
  );
  //   F[msg_inpt_lst]: 0:0
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ctrl_signals_msg_inpt_lst (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ctrl_signals_we),
    .wd     (ctrl_signals_msg_inpt_lst_wd),

    // from internal hardware
    .de     (hw2reg.ctrl_signals.msg_inpt_lst.de),
    .d      (hw2reg.ctrl_signals.msg_inpt_lst.d),

    // to internal hardware
    .qe     (ctrl_signals_flds_we[0]),
    .q      (reg2hw.ctrl_signals.msg_inpt_lst.q),
    .ds     (),

    // to register interface (read)
    .qs     (ctrl_signals_msg_inpt_lst_qs)
  );
  assign reg2hw.ctrl_signals.msg_inpt_lst.qe = ctrl_signals_qe;

  //   F[msg_inpt_vld_byte_0]: 1:1
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ctrl_signals_msg_inpt_vld_byte_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ctrl_signals_we),
    .wd     (ctrl_signals_msg_inpt_vld_byte_0_wd),

    // from internal hardware
    .de     (hw2reg.ctrl_signals.msg_inpt_vld_byte_0.de),
    .d      (hw2reg.ctrl_signals.msg_inpt_vld_byte_0.d),

    // to internal hardware
    .qe     (ctrl_signals_flds_we[1]),
    .q      (reg2hw.ctrl_signals.msg_inpt_vld_byte_0.q),
    .ds     (),

    // to register interface (read)
    .qs     (ctrl_signals_msg_inpt_vld_byte_0_qs)
  );
  assign reg2hw.ctrl_signals.msg_inpt_vld_byte_0.qe = ctrl_signals_qe;

  //   F[msg_inpt_vld_byte_1]: 2:2
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ctrl_signals_msg_inpt_vld_byte_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ctrl_signals_we),
    .wd     (ctrl_signals_msg_inpt_vld_byte_1_wd),

    // from internal hardware
    .de     (hw2reg.ctrl_signals.msg_inpt_vld_byte_1.de),
    .d      (hw2reg.ctrl_signals.msg_inpt_vld_byte_1.d),

    // to internal hardware
    .qe     (ctrl_signals_flds_we[2]),
    .q      (reg2hw.ctrl_signals.msg_inpt_vld_byte_1.q),
    .ds     (),

    // to register interface (read)
    .qs     (ctrl_signals_msg_inpt_vld_byte_1_qs)
  );
  assign reg2hw.ctrl_signals.msg_inpt_vld_byte_1.qe = ctrl_signals_qe;

  //   F[msg_inpt_vld_byte_2]: 3:3
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ctrl_signals_msg_inpt_vld_byte_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ctrl_signals_we),
    .wd     (ctrl_signals_msg_inpt_vld_byte_2_wd),

    // from internal hardware
    .de     (hw2reg.ctrl_signals.msg_inpt_vld_byte_2.de),
    .d      (hw2reg.ctrl_signals.msg_inpt_vld_byte_2.d),

    // to internal hardware
    .qe     (ctrl_signals_flds_we[3]),
    .q      (reg2hw.ctrl_signals.msg_inpt_vld_byte_2.q),
    .ds     (),

    // to register interface (read)
    .qs     (ctrl_signals_msg_inpt_vld_byte_2_qs)
  );
  assign reg2hw.ctrl_signals.msg_inpt_vld_byte_2.qe = ctrl_signals_qe;

  //   F[msg_inpt_vld_byte_3]: 4:4
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ctrl_signals_msg_inpt_vld_byte_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ctrl_signals_we),
    .wd     (ctrl_signals_msg_inpt_vld_byte_3_wd),

    // from internal hardware
    .de     (hw2reg.ctrl_signals.msg_inpt_vld_byte_3.de),
    .d      (hw2reg.ctrl_signals.msg_inpt_vld_byte_3.d),

    // to internal hardware
    .qe     (ctrl_signals_flds_we[4]),
    .q      (reg2hw.ctrl_signals.msg_inpt_vld_byte_3.q),
    .ds     (),

    // to register interface (read)
    .qs     (ctrl_signals_msg_inpt_vld_byte_3_qs)
  );
  assign reg2hw.ctrl_signals.msg_inpt_vld_byte_3.qe = ctrl_signals_qe;


  // R[state_signals]: V(False)
  //   F[cmprss_otpt_vld]: 0:0
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0)
  ) u_state_signals_cmprss_otpt_vld (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.state_signals.cmprss_otpt_vld.de),
    .d      (hw2reg.state_signals.cmprss_otpt_vld.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.state_signals.cmprss_otpt_vld.q),
    .ds     (),

    // to register interface (read)
    .qs     (state_signals_cmprss_otpt_vld_qs)
  );

  //   F[msg_inpt_rdy]: 1:1
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0)
  ) u_state_signals_msg_inpt_rdy (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.state_signals.msg_inpt_rdy.de),
    .d      (hw2reg.state_signals.msg_inpt_rdy.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.state_signals.msg_inpt_rdy.q),
    .ds     (),

    // to register interface (read)
    .qs     (state_signals_msg_inpt_rdy_qs)
  );


  // R[message_in]: V(False)
  logic message_in_qe;
  logic [0:0] message_in_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_message_in0_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&message_in_flds_we),
    .q_o(message_in_qe)
  );
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_message_in (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (message_in_we),
    .wd     (message_in_wd),

    // from internal hardware
    .de     (hw2reg.message_in.de),
    .d      (hw2reg.message_in.d),

    // to internal hardware
    .qe     (message_in_flds_we[0]),
    .q      (reg2hw.message_in.q),
    .ds     (),

    // to register interface (read)
    .qs     (message_in_qs)
  );
  assign reg2hw.message_in.qe = message_in_qe;


  // Subregister 0 of Multireg result_out
  // R[result_out_0]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_result_out_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.result_out[0].de),
    .d      (hw2reg.result_out[0].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.result_out[0].q),
    .ds     (),

    // to register interface (read)
    .qs     (result_out_0_qs)
  );


  // Subregister 1 of Multireg result_out
  // R[result_out_1]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_result_out_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.result_out[1].de),
    .d      (hw2reg.result_out[1].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.result_out[1].q),
    .ds     (),

    // to register interface (read)
    .qs     (result_out_1_qs)
  );


  // Subregister 2 of Multireg result_out
  // R[result_out_2]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_result_out_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.result_out[2].de),
    .d      (hw2reg.result_out[2].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.result_out[2].q),
    .ds     (),

    // to register interface (read)
    .qs     (result_out_2_qs)
  );


  // Subregister 3 of Multireg result_out
  // R[result_out_3]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_result_out_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.result_out[3].de),
    .d      (hw2reg.result_out[3].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.result_out[3].q),
    .ds     (),

    // to register interface (read)
    .qs     (result_out_3_qs)
  );


  // Subregister 4 of Multireg result_out
  // R[result_out_4]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_result_out_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.result_out[4].de),
    .d      (hw2reg.result_out[4].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.result_out[4].q),
    .ds     (),

    // to register interface (read)
    .qs     (result_out_4_qs)
  );


  // Subregister 5 of Multireg result_out
  // R[result_out_5]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_result_out_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.result_out[5].de),
    .d      (hw2reg.result_out[5].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.result_out[5].q),
    .ds     (),

    // to register interface (read)
    .qs     (result_out_5_qs)
  );


  // Subregister 6 of Multireg result_out
  // R[result_out_6]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_result_out_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.result_out[6].de),
    .d      (hw2reg.result_out[6].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.result_out[6].q),
    .ds     (),

    // to register interface (read)
    .qs     (result_out_6_qs)
  );


  // Subregister 7 of Multireg result_out
  // R[result_out_7]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_result_out_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.result_out[7].de),
    .d      (hw2reg.result_out[7].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.result_out[7].q),
    .ds     (),

    // to register interface (read)
    .qs     (result_out_7_qs)
  );



  logic [10:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[ 0] = (reg_addr == SM3_CTRL_SIGNALS_OFFSET);
    addr_hit[ 1] = (reg_addr == SM3_STATE_SIGNALS_OFFSET);
    addr_hit[ 2] = (reg_addr == SM3_MESSAGE_IN_OFFSET);
    addr_hit[ 3] = (reg_addr == SM3_RESULT_OUT_0_OFFSET);
    addr_hit[ 4] = (reg_addr == SM3_RESULT_OUT_1_OFFSET);
    addr_hit[ 5] = (reg_addr == SM3_RESULT_OUT_2_OFFSET);
    addr_hit[ 6] = (reg_addr == SM3_RESULT_OUT_3_OFFSET);
    addr_hit[ 7] = (reg_addr == SM3_RESULT_OUT_4_OFFSET);
    addr_hit[ 8] = (reg_addr == SM3_RESULT_OUT_5_OFFSET);
    addr_hit[ 9] = (reg_addr == SM3_RESULT_OUT_6_OFFSET);
    addr_hit[10] = (reg_addr == SM3_RESULT_OUT_7_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[ 0] & (|(SM3_PERMIT[ 0] & ~reg_be))) |
               (addr_hit[ 1] & (|(SM3_PERMIT[ 1] & ~reg_be))) |
               (addr_hit[ 2] & (|(SM3_PERMIT[ 2] & ~reg_be))) |
               (addr_hit[ 3] & (|(SM3_PERMIT[ 3] & ~reg_be))) |
               (addr_hit[ 4] & (|(SM3_PERMIT[ 4] & ~reg_be))) |
               (addr_hit[ 5] & (|(SM3_PERMIT[ 5] & ~reg_be))) |
               (addr_hit[ 6] & (|(SM3_PERMIT[ 6] & ~reg_be))) |
               (addr_hit[ 7] & (|(SM3_PERMIT[ 7] & ~reg_be))) |
               (addr_hit[ 8] & (|(SM3_PERMIT[ 8] & ~reg_be))) |
               (addr_hit[ 9] & (|(SM3_PERMIT[ 9] & ~reg_be))) |
               (addr_hit[10] & (|(SM3_PERMIT[10] & ~reg_be)))));
  end

  // Generate write-enables
  assign ctrl_signals_we = addr_hit[0] & reg_we & !reg_error;

  assign ctrl_signals_msg_inpt_lst_wd = reg_wdata[0];

  assign ctrl_signals_msg_inpt_vld_byte_0_wd = reg_wdata[1];

  assign ctrl_signals_msg_inpt_vld_byte_1_wd = reg_wdata[2];

  assign ctrl_signals_msg_inpt_vld_byte_2_wd = reg_wdata[3];

  assign ctrl_signals_msg_inpt_vld_byte_3_wd = reg_wdata[4];
  assign message_in_we = addr_hit[2] & reg_we & !reg_error;

  assign message_in_wd = reg_wdata[31:0];

  // Assign write-enables to checker logic vector.
  always_comb begin
    reg_we_check = '0;
    reg_we_check[0] = ctrl_signals_we;
    reg_we_check[1] = 1'b0;
    reg_we_check[2] = message_in_we;
    reg_we_check[3] = 1'b0;
    reg_we_check[4] = 1'b0;
    reg_we_check[5] = 1'b0;
    reg_we_check[6] = 1'b0;
    reg_we_check[7] = 1'b0;
    reg_we_check[8] = 1'b0;
    reg_we_check[9] = 1'b0;
    reg_we_check[10] = 1'b0;
  end

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[0] = ctrl_signals_msg_inpt_lst_qs;
        reg_rdata_next[1] = ctrl_signals_msg_inpt_vld_byte_0_qs;
        reg_rdata_next[2] = ctrl_signals_msg_inpt_vld_byte_1_qs;
        reg_rdata_next[3] = ctrl_signals_msg_inpt_vld_byte_2_qs;
        reg_rdata_next[4] = ctrl_signals_msg_inpt_vld_byte_3_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[0] = state_signals_cmprss_otpt_vld_qs;
        reg_rdata_next[1] = state_signals_msg_inpt_rdy_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[31:0] = message_in_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[31:0] = result_out_0_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[31:0] = result_out_1_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[31:0] = result_out_2_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[31:0] = result_out_3_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[31:0] = result_out_4_qs;
      end

      addr_hit[8]: begin
        reg_rdata_next[31:0] = result_out_5_qs;
      end

      addr_hit[9]: begin
        reg_rdata_next[31:0] = result_out_6_qs;
      end

      addr_hit[10]: begin
        reg_rdata_next[31:0] = result_out_7_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // shadow busy
  logic shadow_busy;
  assign shadow_busy = 1'b0;

  // register busy
  assign reg_busy = shadow_busy;

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT_PULSE(wePulse, reg_we, clk_i, !rst_ni)
  `ASSERT_PULSE(rePulse, reg_re, clk_i, !rst_ni)

  `ASSERT(reAfterRv, $rose(reg_re || reg_we) |=> tl_o_pre.d_valid, clk_i, !rst_ni)

  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit), clk_i, !rst_ni)

  // this is formulated as an assumption such that the FPV testbenches do disprove this
  // property by mistake
  //`ASSUME(reqParity, tl_reg_h2d.a_valid |-> tl_reg_h2d.a_user.chk_en == tlul_pkg::CheckDis)

endmodule
