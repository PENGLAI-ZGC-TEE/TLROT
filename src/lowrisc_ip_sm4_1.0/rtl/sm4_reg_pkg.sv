// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package sm4_reg_pkg;

  // Param list
  parameter int NumRegsData = 4;
  parameter int NumRegsKey = 4;

  // Address widths within the block
  parameter int BlockAw = 6;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////

  typedef struct packed {
    struct packed {
      logic        q;
      logic        qe;
    } sm4_enable_in;
    struct packed {
      logic        q;
      logic        qe;
    } encdec_sel_in;
    struct packed {
      logic        q;
      logic        qe;
    } enable_key_exp_in;
    struct packed {
      logic        q;
      logic        qe;
    } user_key_valid_in;
    struct packed {
      logic        q;
      logic        qe;
    } encdec_enable_in;
    struct packed {
      logic        q;
      logic        qe;
    } valid_in;
  } sm4_reg2hw_ctrl_signals_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } key_exp_ready_out;
    struct packed {
      logic        q;
    } valid_out;
  } sm4_reg2hw_state_signals_reg_t;

  typedef struct packed {
    logic [31:0] q;
    logic        qe;
  } sm4_reg2hw_key_mreg_t;

  typedef struct packed {
    logic [31:0] q;
    logic        qe;
  } sm4_reg2hw_data_in_mreg_t;

  typedef struct packed {
    logic [31:0] q;
  } sm4_reg2hw_result_out_mreg_t;

  typedef struct packed {
    struct packed {
      logic        d;
      logic        de;
    } sm4_enable_in;
    struct packed {
      logic        d;
      logic        de;
    } encdec_sel_in;
    struct packed {
      logic        d;
      logic        de;
    } enable_key_exp_in;
    struct packed {
      logic        d;
      logic        de;
    } user_key_valid_in;
    struct packed {
      logic        d;
      logic        de;
    } encdec_enable_in;
    struct packed {
      logic        d;
      logic        de;
    } valid_in;
  } sm4_hw2reg_ctrl_signals_reg_t;

  typedef struct packed {
    struct packed {
      logic        d;
      logic        de;
    } key_exp_ready_out;
    struct packed {
      logic        d;
      logic        de;
    } valid_out;
  } sm4_hw2reg_state_signals_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } sm4_hw2reg_key_mreg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } sm4_hw2reg_data_in_mreg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } sm4_hw2reg_result_out_mreg_t;

  // Register -> HW type
  typedef struct packed {
    sm4_reg2hw_ctrl_signals_reg_t ctrl_signals; // [405:394]
    sm4_reg2hw_state_signals_reg_t state_signals; // [393:392]
    sm4_reg2hw_key_mreg_t [3:0] key; // [391:260]
    sm4_reg2hw_data_in_mreg_t [3:0] data_in; // [259:128]
    sm4_reg2hw_result_out_mreg_t [3:0] result_out; // [127:0]
  } sm4_reg2hw_t;

  // HW -> register type
  typedef struct packed {
    sm4_hw2reg_ctrl_signals_reg_t ctrl_signals; // [411:400]
    sm4_hw2reg_state_signals_reg_t state_signals; // [399:396]
    sm4_hw2reg_key_mreg_t [3:0] key; // [395:264]
    sm4_hw2reg_data_in_mreg_t [3:0] data_in; // [263:132]
    sm4_hw2reg_result_out_mreg_t [3:0] result_out; // [131:0]
  } sm4_hw2reg_t;

  // Register offsets
  parameter logic [BlockAw-1:0] SM4_CTRL_SIGNALS_OFFSET = 6'h 0;
  parameter logic [BlockAw-1:0] SM4_STATE_SIGNALS_OFFSET = 6'h 4;
  parameter logic [BlockAw-1:0] SM4_KEY_0_OFFSET = 6'h 8;
  parameter logic [BlockAw-1:0] SM4_KEY_1_OFFSET = 6'h c;
  parameter logic [BlockAw-1:0] SM4_KEY_2_OFFSET = 6'h 10;
  parameter logic [BlockAw-1:0] SM4_KEY_3_OFFSET = 6'h 14;
  parameter logic [BlockAw-1:0] SM4_DATA_IN_0_OFFSET = 6'h 18;
  parameter logic [BlockAw-1:0] SM4_DATA_IN_1_OFFSET = 6'h 1c;
  parameter logic [BlockAw-1:0] SM4_DATA_IN_2_OFFSET = 6'h 20;
  parameter logic [BlockAw-1:0] SM4_DATA_IN_3_OFFSET = 6'h 24;
  parameter logic [BlockAw-1:0] SM4_RESULT_OUT_0_OFFSET = 6'h 28;
  parameter logic [BlockAw-1:0] SM4_RESULT_OUT_1_OFFSET = 6'h 2c;
  parameter logic [BlockAw-1:0] SM4_RESULT_OUT_2_OFFSET = 6'h 30;
  parameter logic [BlockAw-1:0] SM4_RESULT_OUT_3_OFFSET = 6'h 34;

  // Register index
  typedef enum int {
    SM4_CTRL_SIGNALS,
    SM4_STATE_SIGNALS,
    SM4_KEY_0,
    SM4_KEY_1,
    SM4_KEY_2,
    SM4_KEY_3,
    SM4_DATA_IN_0,
    SM4_DATA_IN_1,
    SM4_DATA_IN_2,
    SM4_DATA_IN_3,
    SM4_RESULT_OUT_0,
    SM4_RESULT_OUT_1,
    SM4_RESULT_OUT_2,
    SM4_RESULT_OUT_3
  } sm4_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] SM4_PERMIT [14] = '{
    4'b 0001, // index[ 0] SM4_CTRL_SIGNALS
    4'b 0001, // index[ 1] SM4_STATE_SIGNALS
    4'b 1111, // index[ 2] SM4_KEY_0
    4'b 1111, // index[ 3] SM4_KEY_1
    4'b 1111, // index[ 4] SM4_KEY_2
    4'b 1111, // index[ 5] SM4_KEY_3
    4'b 1111, // index[ 6] SM4_DATA_IN_0
    4'b 1111, // index[ 7] SM4_DATA_IN_1
    4'b 1111, // index[ 8] SM4_DATA_IN_2
    4'b 1111, // index[ 9] SM4_DATA_IN_3
    4'b 1111, // index[10] SM4_RESULT_OUT_0
    4'b 1111, // index[11] SM4_RESULT_OUT_1
    4'b 1111, // index[12] SM4_RESULT_OUT_2
    4'b 1111  // index[13] SM4_RESULT_OUT_3
  };

endpackage
